[
  {
    "objectID": "tidytuesday-exercise/tidytuesday-exercise.html",
    "href": "tidytuesday-exercise/tidytuesday-exercise.html",
    "title": "Tidytuesday Exercise",
    "section": "",
    "text": "Below is an exercise for analyzing a data set from Tidytuesday. The data set contains state-level results for medicare.gov “timely and effective care” measurements. The data set can be downloaded from the website below:\nhttps://github.com/rfordatascience/tidytuesday/tree/main/data/2025/2025-04-08\nThe data set should have 8 variables as listed below.\nstate (character): The two-letter code for the state (or territory, etc) where the hospital is located.\ncondition (character): The condition for which the patient was admitted. Six categories of conditions are included in the data.\nmeasure_id (character): The ID of the thing being measured. Note that there are 22 unique IDs but only 21 unique names.\nmeasure_name (character): The name of the thing being measured. Note that there are 22 unique IDs but only 21 unique names.\nscore (character): The score of the measure.\nfootnote (character): Footnotes that apply to this measure: 5 = “Results are not available for this reporting period.”, 25 = “State and national averages include Veterans Health Administration (VHA) hospital data.”, 26 = “State and national averages include Department of Defense (DoD) hospital data.”.\nstart_date (date): The date on which measurement began for this measure.\nend_date (date): The date on which measurement ended for this measure.\nMy research goal is to study whether geographic location by state (state), the percentage of healthcare personnel who are up to date with COVID-19 vaccinations (HCP_COVID_19), the percentage of healthcare workers given influenza vaccination (IMM_3), and the average time patients spent in the emergency department before leaving from a visit (OP_18b) can predict the percentage of patients who left the emergency department before being seen (OP_22).\n\nData processing and exploration\nFirst of all, let’s import the data set and load required packages.\n\n# Load required package\n#library(xgboost)\nlibrary(here)\n\nhere() starts at C:/Users/86182/Desktop/EPID 8060E/MADA/GuozhengYang-MADA-portfolio\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2\n──\n\n\n✔ ggplot2 3.5.1     ✔ purrr   1.0.2\n✔ tibble  3.2.1     ✔ dplyr   1.1.3\n✔ tidyr   1.3.1     ✔ stringr 1.5.1\n✔ readr   2.1.2     ✔ forcats 1.0.0\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'purrr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'stringr' was built under R version 4.2.3\n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n✔ broom        1.0.1     ✔ rsample      1.1.0\n✔ dials        1.0.0     ✔ tune         1.0.0\n✔ infer        1.0.3     ✔ workflows    1.1.0\n✔ modeldata    1.0.1     ✔ workflowsets 1.0.0\n✔ parsnip      1.0.1     ✔ yardstick    1.1.0\n✔ recipes      1.0.1     \n\n\nWarning: package 'scales' was built under R version 4.2.3\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts.\n\nlibrary(ggplot2)\nlibrary(ggpubr)\n\nWarning: package 'ggpubr' was built under R version 4.2.3\n\n\nNow let’s take a first look at the data set.\n\n# Look at the data\ndata &lt;- read.csv(here(\"tidytuesday-data\",\"care_state.csv\"))\ndata$start_date &lt;- as.Date(data$start_date) # Convert start date\ndata$end_date &lt;- as.Date(data$end_date) # Convert end date\nsummary(data)\n\n    state            condition          measure_id        measure_name      \n Length:1232        Length:1232        Length:1232        Length:1232       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n     score       footnote           start_date            end_date         \n Min.   :  1   Length:1232        Min.   :2023-01-01   Min.   :2023-12-31  \n 1st Qu.: 70   Class :character   1st Qu.:2023-04-01   1st Qu.:2024-03-31  \n Median : 93   Mode  :character   Median :2023-04-01   Median :2024-03-31  \n Mean   :134                      Mean   :2023-04-05   Mean   :2024-03-14  \n 3rd Qu.:193                      3rd Qu.:2023-04-01   3rd Qu.:2024-03-31  \n Max.   :730                      Max.   :2024-01-01   Max.   :2024-03-31  \n NA's   :155                                                               \n\n\nI want to look at the distribution of the data collection period for each record. If some of the records were collected within too short a period, I will drop them as they are not very representative.\n\n# Distribution of time period\ndata$date_diff &lt;- as.numeric(data$end_date - data$start_date)\nhist(data$date_diff)\n\n\n\n\n\n\n\ntable(data$date_diff)\n\n\n 90 182 364 365 \n 56  56 224 896 \n\n\nAs shown, some of the records covers a time period of 90 days or 182 days. I think that is enough to reflect the average status of a state. I will drop the columns denoting dates. I will also drop measure_name, condition, and footnote as they are redundant for data analysis.\n\n# Drop useless columns\ndata &lt;- data %&gt;% select(state, measure_id, score)\nsummary(data)\n\n    state            measure_id            score    \n Length:1232        Length:1232        Min.   :  1  \n Class :character   Class :character   1st Qu.: 70  \n Mode  :character   Mode  :character   Median : 93  \n                                       Mean   :134  \n                                       3rd Qu.:193  \n                                       Max.   :730  \n                                       NA's   :155  \n\n\nNext, I will only keep the records of interest of this study. To be specific, I will only keep HCP_COVID_19, IMM_3, OP_18b, and OP_22 from the column measure_id. I will also drop\n\n# Keep *HCP_COVID_19*, *IMM_3*, *OP_18b*, and *OP_22*\ndata &lt;- data %&gt;% filter(measure_id %in% c(\"HCP_COVID_19\", \"IMM_3\", \"OP_18b\", \"OP_22\"))\nsummary(data)\n\n    state            measure_id            score       \n Length:224         Length:224         Min.   :  1.00  \n Class :character   Class :character   1st Qu.:  5.00  \n Mode  :character   Mode  :character   Median : 58.50  \n                                       Mean   : 64.92  \n                                       3rd Qu.: 99.50  \n                                       Max.   :310.00  \n                                       NA's   :16      \n\n\nNow, I will pivot the data to a wider format. Also, I will drop rows with missing scores.\n\n# Transform data structure\ndata &lt;- data %&gt;%\n  pivot_wider(names_from=measure_id, values_from=score) %&gt;%\n  filter(!is.na(OP_22))\nsummary(data)\n\n    state            HCP_COVID_19       IMM_3           OP_18b     \n Length:52          Min.   : 2.70   Min.   :58.00   Min.   :110.0  \n Class :character   1st Qu.: 8.70   1st Qu.:74.75   1st Qu.:133.0  \n Mode  :character   Median :11.10   Median :82.50   Median :154.5  \n                    Mean   :15.20   Mean   :80.77   Mean   :161.2  \n                    3rd Qu.:18.75   3rd Qu.:88.00   3rd Qu.:174.5  \n                    Max.   :62.00   Max.   :96.00   Max.   :310.0  \n     OP_22      \n Min.   :1.000  \n 1st Qu.:2.000  \n Median :2.000  \n Mean   :2.538  \n 3rd Qu.:3.000  \n Max.   :6.000  \n\n\nAs for states, it’s hard to integrate geographic locations by too many categories. I will classify the states by their locations.\n\n# Classify states\neast_states &lt;- c(\"ME\",\"NH\",\"VT\",\"MA\",\"RI\",\"CT\",\"NY\",\"NJ\",\"PA\",\"MD\",\"DE\",\"VA\",\"NC\",\"SC\",\"GA\",\"FL\",\"WV\")\nmidwest_states &lt;- c(\"OH\",\"MI\",\"IN\",\"IL\",\"WI\",\"MN\",\"IA\",\"MO\",\"ND\",\"SD\",\"NE\",\"KS\")\nsouth_states &lt;- c(\"KY\",\"TN\",\"MS\",\"AL\",\"OK\",\"TX\",\"AR\",\"LA\")\nwest_states &lt;- c(\"MT\",\"ID\",\"WY\",\"CO\",\"NM\",\"AZ\",\"UT\",\"NV\",\"CA\",\"OR\",\"WA\",\"AK\",\"HI\")\n\ndata &lt;- data %&gt;% \n  mutate(region=case_when(state %in% east_states ~ \"East\",\n                          state %in% midwest_states ~ \"Midwest\",\n                          state %in% south_states ~ \"South\",\n                          state %in% west_states ~ \"West\",\n                          TRUE ~ \"Other\")) %&gt;%\n  select(-state)\nsummary(data)\n\n  HCP_COVID_19       IMM_3           OP_18b          OP_22      \n Min.   : 2.70   Min.   :58.00   Min.   :110.0   Min.   :1.000  \n 1st Qu.: 8.70   1st Qu.:74.75   1st Qu.:133.0   1st Qu.:2.000  \n Median :11.10   Median :82.50   Median :154.5   Median :2.000  \n Mean   :15.20   Mean   :80.77   Mean   :161.2   Mean   :2.538  \n 3rd Qu.:18.75   3rd Qu.:88.00   3rd Qu.:174.5   3rd Qu.:3.000  \n Max.   :62.00   Max.   :96.00   Max.   :310.0   Max.   :6.000  \n    region         \n Length:52         \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\n\nNow let’s look at the distribution of the four continuous variables and the tables for regions.\n\n# Distribution of variables\nd1 &lt;- ggplot(data, aes(x=HCP_COVID_19))+ \n  geom_histogram(binwidth=2, fill = \"lightblue1\", color=\"black\")+\n  labs(x=\"HCP_COVID_19\", y=\"Count\")+\n  theme_bw()+\n  theme(axis.title.x=element_text(size=15,color=\"black\",margin=margin(t=15),face=\"bold\"),\n        axis.title.y=element_text(size=15,color=\"black\",margin=margin(r=15),face=\"bold\"),\n        axis.text.x=element_text(color=\"black\",size=10,vjust=0),\n        axis.text.y=element_text(color=\"black\",size=10,hjust=1))\n\nd2 &lt;- ggplot(data, aes(x=IMM_3))+ \n  geom_histogram(binwidth=2, fill=\"palegreen1\", color=\"black\")+ \n  labs(x=\"IMM_3\", y=\"Count\")+\n  theme_bw()+\n  theme(axis.title.x=element_text(size=15,color=\"black\",margin=margin(t=15),face=\"bold\"),\n        axis.title.y=element_text(size=15,color=\"black\",margin=margin(r=15),face=\"bold\"),\n        axis.text.x=element_text(color=\"black\",size=10,vjust=0),\n        axis.text.y=element_text(color=\"black\",size=10,hjust=1))\n\nd3 &lt;- ggplot(data, aes(x=OP_18b))+ \n  geom_histogram(binwidth=2, fill=\"palevioletred1\", color=\"black\")+ \n  labs(x=\"OP_18b\", y=\"Count\")+\n  theme_bw()+\n  theme(axis.title.x=element_text(size=15,color=\"black\",margin=margin(t=15),face=\"bold\"),\n        axis.title.y=element_text(size=15,color=\"black\",margin=margin(r=15),face=\"bold\"),\n        axis.text.x=element_text(color=\"black\",size=10,vjust=0),\n        axis.text.y=element_text(color=\"black\",size=10,hjust=1))\n\nd4 &lt;- ggplot(data, aes(x=OP_22))+ \n  geom_histogram(binwidth=2, fill=\"lightgoldenrod\", color=\"black\")+ \n  labs(x=\"OP_22\", y=\"Count\")+\n  theme_bw()+\n  theme(axis.title.x=element_text(size=15,color=\"black\",margin=margin(t=15),face=\"bold\"),\n        axis.title.y=element_text(size=15,color=\"black\",margin=margin(r=15),face=\"bold\"),\n        axis.text.x=element_text(color=\"black\",size=10,vjust=0),\n        axis.text.y=element_text(color=\"black\",size=10,hjust=1))\n\nggarrange(d1, d2, d3, d4, ncol=2, nrow=2)\n\n\n\n\n\n\n\ntable(data$region)\n\n\n   East Midwest   Other   South    West \n     17      12       2       8      13 \n\n\n\n\nRandom forest\nFirst of all, I want to fit a random forest model on this data set. I will split the data using a split ratio of 1:4. I will also use 5-fold CV to examine the performance of the RF model. Specifically, I want to tune the two parameters in the RF model (i.e., mtry and min_n) and select the best fit model based on RMSE. Finally, I will demonstrate the performance of the RF model by RMSE and R-square.\n\n# Set a seed\nrngseed &lt;- 1234\nset.seed(rngseed)\n\n\n# 5-fold CV\ndata_split &lt;- initial_split(data, prop=.8)\ntrain_data &lt;- training(data_split)\ntest_data  &lt;- testing(data_split)\nfolds &lt;- vfold_cv(train_data, v=5)\n\n\n# Random forest model\nrcp &lt;- recipe(OP_22 ~ HCP_COVID_19 + IMM_3 + OP_18b + region, data=train_data) %&gt;%\n  step_dummy(all_nominal_predictors()) %&gt;%\n  step_normalize(all_numeric_predictors())\n# Add flexibility: tune the two parameters\nrf_spec &lt;- rand_forest(mtry=tune(), min_n=tune(), trees=500) %&gt;%\n  set_engine(\"ranger\") %&gt;%\n  set_mode(\"regression\")\nrf_wf &lt;- workflow() %&gt;% add_model(rf_spec) %&gt;% add_recipe(rcp)\n# Tune the two parameters based on RMSE\nrf_tune &lt;- tune_grid(rf_wf, resamples=folds, grid=10, metrics=metric_set(rmse))\n\ni Creating pre-processing data to finalize unknown parameter: mtry\n\n\n! Fold1: preprocessor 1/1, model 6/10: 37 samples were requested but there were 32 rows in the data. 32 will be...\n\n\n! Fold1: preprocessor 1/1, model 10/10: 36 samples were requested but there were 32 rows in the data. 32 will be...\n\n\n! Fold2: preprocessor 1/1, model 6/10: 37 samples were requested but there were 33 rows in the data. 33 will be...\n\n\n! Fold2: preprocessor 1/1, model 10/10: 36 samples were requested but there were 33 rows in the data. 33 will be...\n\n\n! Fold3: preprocessor 1/1, model 6/10: 37 samples were requested but there were 33 rows in the data. 33 will be...\n\n\n! Fold3: preprocessor 1/1, model 10/10: 36 samples were requested but there were 33 rows in the data. 33 will be...\n\n\n! Fold4: preprocessor 1/1, model 6/10: 37 samples were requested but there were 33 rows in the data. 33 will be...\n\n\n! Fold4: preprocessor 1/1, model 10/10: 36 samples were requested but there were 33 rows in the data. 33 will be...\n\n\n! Fold5: preprocessor 1/1, model 6/10: 37 samples were requested but there were 33 rows in the data. 33 will be...\n\n\n! Fold5: preprocessor 1/1, model 10/10: 36 samples were requested but there were 33 rows in the data. 33 will be...\n\n# Select the best fit model\nbest_rf &lt;- select_best(rf_tune, metric=\"rmse\")\nfinal_rf &lt;- finalize_workflow(rf_wf, best_rf)\n# Try the model fit on the test set\nrf_fit &lt;- last_fit(final_rf, split=data_split)\ncollect_metrics(rf_fit)\n\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard       1.00  Preprocessor1_Model1\n2 rsq     standard       0.400 Preprocessor1_Model1\n\n\nAs shown, the estimated RMSE for the RF model is 1.00 and the R-square is 0.40.\n\n\nRegression tree\nThen, I want to try if a single regression tree can fit the data set well. I will use the similar workflow as done with the RF model.\n\n# Set a seed\nrngseed &lt;- 1234\nset.seed(rngseed)\n\n\n# Add flexibility: tune the cost parameter and tree depth\ntree_spec &lt;- decision_tree(cost_complexity=tune(), tree_depth=tune()) %&gt;%\n  set_engine(\"rpart\") %&gt;%\n  set_mode(\"regression\")\ntree_wf &lt;- workflow() %&gt;% add_model(tree_spec) %&gt;% add_recipe(rcp)\n# Tune the two parameters based on RMSE\ntree_tune &lt;- tune_grid(tree_wf, resamples=folds, grid=10, metrics=metric_set(rmse))\n# Select the best fit model\nbest_tree &lt;- select_best(tree_tune, metric=\"rmse\")\nfinal_tree &lt;- finalize_workflow(tree_wf, best_tree)\n# Try the model fit on the test set\ntree_fit &lt;- last_fit(final_tree, split=data_split)\ncollect_metrics(tree_fit)\n\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard      1.21   Preprocessor1_Model1\n2 rsq     standard      0.0271 Preprocessor1_Model1\n\n\nAs shown, the estimated RMSE for the tree model is 1.21 but the R-square is only 0.03. The regression tree model has a higher RMSE but a much lower R-square compared to the RF model.\n\n\nGradient boosting\nLast, I want to try the gradient boosting model. I will use the similar workflow as done above.\nSomehow, the xgboost package won’t be loaded when I render the website. It’s the same problem as I encountered for presenting tables, and it has taken me another 20 hrs to fix it. I finally gave up because I tried all the way I could and didn’t find myself doing anything wrong. I will just attach all the outputs related to the gradient boosting model as screenshots. \nAll the codes can run through without any error on my lap-top. If you have any questions, please let me know. I can share my screen and show you how annoying this problem is. \n\n\n\n\n\nAs shown, the estimated RMSE for the gradient boosting model is 0.91 and the R-square is 0.31. The gradient boosting model has a lower RMSE and a lower R-square compared to the RF model.\n\n\nSummary\nLet’s make a plot to see the fitting performance of the three models.\n\n\n\n\n\n\n\n\n\n\nAs shown in the figure above, the gradient boosting model and the regression tree models have a more “reasonable” prediction of the response, since their points are more sparse. Somehow the random forest model only predicts the response within a small range, indicating a potential overfitting problem. Based on the numeric output, the random forest model has the highest R-square while the gradient boosting model has the lowest RMSE. Taking all outputs into consideration, I think the gradient boosting model can better fit the data set.\nBack to our research question, let’s output the contribution of each predictor from the gradient boosting model.\n\n\n\n\n\n\n\n\n\n\nAs shown, the predictors can predict the response, with OP_18b (the average time patients spent in the emergency department before leaving from a visit) and HCP_COVID_19 (the percentage of healthcare personnel who are up to date with COVID-19 vaccinations) having the greatest contribution. Additionally, no regional difference is observed."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Guozheng Yang's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "",
    "text": "Vincent Nguyen contributed to this exercise!!!\nThanks for help from Alexis Gonzalez and Hope Grismer!!!\nLET’S GO GROUP 3!!!\nThe structure below is one possible setup for a data analysis project (including the course project). For a manuscript, adjust as needed. You don’t need to have exactly these sections, but the content covering those sections should be addressed.\nThis uses MS Word as output format. See here for more information. You can switch to other formats, like html or pdf. See the Quarto documentation for other formats."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.1 General Background Information",
    "text": "2.1 General Background Information\nProvide enough background on your topic that others can understand the why and how of your analysis"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.2 Description of data and data source",
    "text": "2.2 Description of data and data source\nDescribe what the data is, what it contains, where it is from, etc. Eventually this might be part of a methods section. I added two more columns to the data file, namely Salary and Major. The Salary column contains annual salaries as numeric values. The Major column has categorical values denoting different majors."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.3 Questions/Hypotheses to be addressed",
    "text": "2.3 Questions/Hypotheses to be addressed\nState the research questions you plan to answer with this analysis.\nTo cite other work (important everywhere, but likely happens first in introduction), make sure your references are in the bibtex file specified in the YAML header above (here dataanalysis_template_references.bib) and have the right bibtex key. Then you can include like this:\nExamples of reproducible research projects can for instance be found in (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.1 Data aquisition",
    "text": "3.1 Data aquisition\nAs applicable, explain where and how you got the data. If you directly import the data from an online source, you can combine this section with the next."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.2 Data import and cleaning",
    "text": "3.2 Data import and cleaning\nWrite code that reads in the file and cleans it so it’s ready for analysis. Since this will be fairly long code for most datasets, it might be a good idea to have it in one or several R scripts. If that is the case, explain here briefly what kind of cleaning/processing you do, and provide more details and well documented code somewhere (e.g. as supplement in a paper). All materials, including files that contain code, should be commented well so everyone can follow along."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.3 Statistical analysis",
    "text": "3.3 Statistical analysis\nExplain anything related to your statistical analyses."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.1 Exploratory/Descriptive analysis",
    "text": "4.1 Exploratory/Descriptive analysis\nUse a combination of text/tables/figures to explore and describe your data. Show the most important descriptive results here. Additional ones should go in the supplement. Even more can be in the R and Quarto files that are part of your project.\nTable 1 shows a summary of the data.\nNote the loading of the data providing a relative path using the ../../ notation. (Two dots means a folder up). You never want to specify an absolute path like C:\\ahandel\\myproject\\results\\ because if you share this with someone, it won’t work for them since they don’t have that path. You can also use the here R package to create paths. See examples of that below. I recommend the here package, but I’m showing the other approach here just in case you encounter it.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\ncharacter.min\ncharacter.max\ncharacter.empty\ncharacter.n_unique\ncharacter.whitespace\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\ncharacter\nMajor\n0\n1\n4\n10\n0\n5\n0\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nfactor\nGender\n0\n1\nNA\nNA\nNA\nNA\nNA\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n165.66667\n15.97655\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n70.11111\n21.24526\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nnumeric\nSalary\n0\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n75588.11111\n20803.94505\n49877\n65012\n66685\n90400\n109841\n▅▇▂▅▂"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.2 Basic statistical analysis",
    "text": "4.2 Basic statistical analysis\nTo get some further insight into your data, if reasonable you could compute simple statistics (e.g. simple models with 1 predictor) to look for associations between your outcome(s) and each individual predictor variable. Though note that unless you pre-specified the outcome and main exposure, any “p&lt;0.05 means statistical significance” interpretation is not valid.\nFigure 1 shows a scatterplot figure produced by one of the R scripts.\n\n\n\n\n\n\n\n\nFigure 1: Height and weight stratified by gender."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.3 Full analysis",
    "text": "4.3 Full analysis\nUse one or several suitable statistical/machine learning methods to analyze your data and to produce meaningful figures, tables, etc. This might again be code that is best placed in one or several separate R scripts that need to be well documented. You want the code to produce figures and data ready for display as tables, and save those. Then you load them here.\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n149.2726967\n23.3823360\n6.3839942\n0.0013962\n\n\nWeight\n0.2623972\n0.3512436\n0.7470519\n0.4886517\n\n\nGenderM\n-2.1244913\n15.5488953\n-0.1366329\n0.8966520\n\n\nGenderO\n-4.7644739\n19.0114155\n-0.2506112\n0.8120871"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.1 Summary and Interpretation",
    "text": "5.1 Summary and Interpretation\nSummarize what you did, what you found and what it means."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.2 Strengths and Limitations",
    "text": "5.2 Strengths and Limitations\nDiscuss what you perceive as strengths and limitations of your analysis."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.3 Conclusions",
    "text": "5.3 Conclusions\nWhat are the main take-home messages?\nInclude citations in your Rmd file using bibtex, the list of references will automatically be placed at the end\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, et al., 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#boxplot-of-height-major",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#boxplot-of-height-major",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "6.1 Boxplot of Height ~ Major",
    "text": "6.1 Boxplot of Height ~ Major\nTo explore if the distribution of height has difference across different majors, we made a boxplot of height grouped by major. As shown, observations whose major is Economics, Math, or Statistics have a higher height compared to those whose major is Biology or History. However, only a few observations were left after data cleaning. According to the plot, only one observation was left for Biology, Economics, and History. The too small sample size makes the finding not convincing.\nFigure 2 shows the boxplot of height grouped by major.\n\n\n\n\n\n\n\n\nFigure 2: Height stratified by major."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#scatterplot-of-salary-weight",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#scatterplot-of-salary-weight",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "6.2 Scatterplot of Salary ~ Weight",
    "text": "6.2 Scatterplot of Salary ~ Weight\nThe scatterplot below shows the relationship between salary and weight. There is generally a positive association between salary and weight. However, the variance is not constant as the variation in salary is greater at higher weights. A logarithmic transformation for salary could possibly solve this problem as the two variables are not on the same scale.\nFigure 3 shows the scatterplot of salary and weight.\n\n\n\n\n\n\n\n\nFigure 3: Height stratified by major."
  },
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Guozheng Yang's Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Guozheng Yang's Data Analysis Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.2.3\n\nlibrary(here) #to set paths\n\nhere() starts at C:/Users/86182/Desktop/EPID 8060E/MADA/GuozhengYang-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`        \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                   \n1 Height          height in centimeters                 numeric value &gt;0 or NA  \n2 Weight          weight in kilograms                   numeric value &gt;0 or NA  \n3 Gender          identified gender (male/female/other) M/F/O/NA                \n4 Salary          annual salary in USD                  numeric value &gt;0 or NA  \n5 Major           Undergraduate major                   Economics/Statistics/Ma…\n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n$ Salary &lt;dbl&gt; 90400, 65012, 120536, 109841, 78887, 66685, 49877, 96021, 83254…\n$ Major  &lt;chr&gt; \"Economics\", \"Statistics\", \"Economics\", \"Math\", \"History\", \"Sta…\n\nsummary(rawdata)\n\n    Height              Weight          Gender              Salary      \n Length:14          Min.   :  45.0   Length:14          Min.   : 49877  \n Class :character   1st Qu.:  55.0   Class :character   1st Qu.: 65736  \n Mode  :character   Median :  70.0   Mode  :character   Median : 84523  \n                    Mean   : 602.7                      Mean   : 94114  \n                    3rd Qu.:  90.0                      3rd Qu.:106386  \n                    Max.   :7000.0                      Max.   :198003  \n                    NA's   :1                                           \n    Major          \n Length:14         \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender Salary Major     \n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;     \n1 180        80 M       90400 Economics \n2 175        70 O       65012 Statistics\n3 sixty      60 F      120536 Economics \n4 178        76 F      109841 Math      \n5 192        90 NA      78887 History   \n6 6          55 F       66685 Statistics\n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nMajor\n0\n1\n4\n10\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55.00\n70\n90\n7000\n▇▁▁▁▁\n\n\nSalary\n0\n1.00\n94113.86\n41416.54\n49877\n65736.25\n84523\n106386\n198003\n▇▅▂▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nMajor\n0\n1\n4\n10\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nSalary\n0\n1.00\n92081.38\n42374.77\n49877\n65420.00\n83254\n96021\n198003\n▇▅▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nMajor\n0\n1\n4\n10\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nSalary\n0\n1.00\n92081.38\n42374.77\n49877\n65420.00\n83254\n96021\n198003\n▇▅▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nMajor\n0\n1\n4\n10\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nSalary\n0\n1\n76584.91\n18764.73\n49877\n65216.0\n78887\n88096\n109841\n▅▇▇▅▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nMajor\n0\n1\n4\n10\n0\n5\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nSalary\n0\n1\n76584.91\n18764.73\n49877\n65216.0\n78887\n88096\n109841\n▅▇▇▅▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nMajor\n0\n1\n4\n10\n0\n5\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nSalary\n0\n1\n75588.11\n20803.95\n49877\n65012\n66685\n90400\n109841\n▅▇▂▅▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Guozheng Yang's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at C:/Users/86182/Desktop/EPID 8060E/MADA/GuozhengYang-MADA-portfolio\n\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\n\nWarning: package 'skimr' was built under R version 4.2.3\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          3     \n_______________________          \nColumn type frequency:           \n  factor                   1     \n  numeric                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Visualization Exercise",
    "section": "",
    "text": "Below is an exercise for visualizing data with help from ChatGPT (ChatGPT 4o model).\n\nIntroduction\nI will use the NBA RAPTOR (Robust Algorithm (using) Player Tracking (and) On/Off Ratings) dataset from the ’22-’23 season for this exercise. The dataset is published on FiveThirtyEight (https://projects.fivethirtyeight.com/nba-player-ratings/?ex_cid=irpromo) and was last updated on June 14th, 2023. By default, the data contains 250 NBA players who played at least 1,137 minutes during the season. In total, 14 columns are included with details shown below. More details can also be found on their Github website: https://github.com/fivethirtyeight/data/tree/master/nba-raptor.\nPLAYER: Player name.\nTEAM: Team name.\nPOSITION: Positions played.\nMINUTES: Minutes played.\nraptor_box_offense: Points above average per 100 possessions added by player on offense, based only on box score estimate.\nraptor_box_defense: Points above average per 100 possessions added by player on defense, based only on box score estimate.\nraptor_box_total: Points above average per 100 possessions added by player, based only on box score estimate.\nraptor_onoff_offense: Points above average per 100 possessions added by player on offense, based only on plus-minus data.\nraptor_onoff_defense: Points above average per 100 possessions added by player on defense, based only on plus-minus data.\nraptor_onoff_total: Points above average per 100 possessions added by player, based only on plus-minus data.\nraptor_offense: Points above average per 100 possessions added by player on offense, using both box and on-off components.\nraptor_defense: Points above average per 100 possessions added by player on defense, using both box and on-off components.\nraptor_total: Points above average per 100 possessions added by player on both offense and defense, using both box and on-off components.\nwar_total: Wins Above Replacement between regular season and playoffs.\nI directly copied the data from the website and paste it into Excel. I then saved the file in a csv format for analysis. First of all, let’s import the data and take a look at the data structure.\n\n# Load required package\n# library(gtExtras)\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\nlibrary(ggtext)\nlibrary(gtsummary)\n\nWarning: package 'gtsummary' was built under R version 4.2.3\n\nlibrary(gt)\n\nWarning: package 'gt' was built under R version 4.2.3\n\nlibrary(ggplot2)\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ tibble  3.2.1     ✔ dplyr   1.1.3\n✔ tidyr   1.3.1     ✔ stringr 1.5.1\n✔ readr   2.1.2     ✔ forcats 1.0.0\n✔ purrr   1.0.2     \n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'purrr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'stringr' was built under R version 4.2.3\n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\n\n# Import the data file and check its structure\ndata &lt;- read.csv(\"nbadata.csv\")\nhead(data)\n\n         PLAYER      TEAM   POSITION MINUTES raptor_box_offense\n1  Nikola Jokic   Nuggets          C    3112                9.0\n2   Joel Embiid     76ers          C    2620                4.0\n3  Jimmy Butler      Heat     SG, SF    3012                6.4\n4   Luka Doncic Mavericks PG, SG, SF    2391                8.9\n5 Anthony Davis    Lakers      PF, C    2512                2.4\n6  Jayson Tatum   Celtics         SF    3531                4.3\n  raptor_box_defense raptor_box_total raptor_onoff_offense raptor_onoff_defense\n1                4.3             13.3                  9.4                  0.3\n2                4.0              7.9                  2.1                  3.7\n3                1.3              7.7                  0.2                 -1.8\n4               -0.3              8.5                  3.7                 -0.9\n5                4.7              7.1                  2.2                  3.5\n6               -0.3              3.9                  4.6                 -0.1\n  raptor_onoff_total raptor_offense raptor_defense raptor_total war_total\n1                9.7            9.5            3.7         13.2      25.9\n2                5.8            3.7            4.1          7.8      14.2\n3               -1.6            5.5            0.7          6.2      13.8\n4                2.7            8.3           -0.4          7.8      13.0\n5                5.7            2.5            4.7          7.2      12.9\n6                4.5            4.5           -0.3          4.2      12.6\n\nstr(data)\n\n'data.frame':   250 obs. of  14 variables:\n $ PLAYER              : chr  \"Nikola Jokic\" \"Joel Embiid\" \"Jimmy Butler\" \"Luka Doncic\" ...\n $ TEAM                : chr  \"Nuggets\" \"76ers\" \"Heat\" \"Mavericks\" ...\n $ POSITION            : chr  \"C\" \"C\" \"SG, SF\" \"PG, SG, SF\" ...\n $ MINUTES             : num  3112 2620 3012 2391 2512 ...\n $ raptor_box_offense  : num  9 4 6.4 8.9 2.4 4.3 7.3 9.4 5.1 1.7 ...\n $ raptor_box_defense  : num  4.3 4 1.3 -0.3 4.7 -0.3 -1.4 -1.5 0.2 2.6 ...\n $ raptor_box_total    : num  13.3 7.9 7.7 8.5 7.1 3.9 6 8 5.3 4.2 ...\n $ raptor_onoff_offense: num  9.4 2.1 0.2 3.7 2.2 4.6 6 5.7 6.7 2.7 ...\n $ raptor_onoff_defense: num  0.3 3.7 -1.8 -0.9 3.5 -0.1 0.1 -1.2 -5.3 1.8 ...\n $ raptor_onoff_total  : num  9.7 5.8 -1.6 2.7 5.7 4.5 6.1 4.5 1.4 4.4 ...\n $ raptor_offense      : num  9.5 3.7 5.5 8.3 2.5 4.5 7.5 9.3 5.7 1.9 ...\n $ raptor_defense      : num  3.7 4.1 0.7 -0.4 4.7 -0.3 -1.2 -1.5 -1 2.5 ...\n $ raptor_total        : num  13.2 7.8 6.2 7.8 7.2 4.2 6.3 7.8 4.8 4.4 ...\n $ war_total           : num  25.9 14.2 13.8 13 12.9 12.6 11.5 11.5 10.9 10.7 ...\n\n\nAs shown, the 250 players’ information are imported with the right format.\n\n\nReplicate a figure using ChatGPT\nNow I will try to replicate the figure on the website with help from ChatGPT. Here I’m attaching my communication with ChatGPT and the code she gives me.\nMe: Good morning! I’m trying to extract data from this website: https://projects.fivethirtyeight.com/nba-player-ratings/?ex_cid=irpromo and analyze it. Can you help me by showing me R code? When I place my requirements, just directly answer my questions. Please don’t answer side information that is not related to my questions. Thanks! I will tell you my requirements for the analysis.\nChatGPT: Good morning! Yes, I can help. Please provide your requirements for the analysis, and I’ll respond with R code directly.\nMe: Great! Now I want to replicate the figure shown on their website. I have attached the screenshots of their figure and the data I have. Please give me code using ggplot2 and make sure that the output figure is exactly the same to theirs. By “exactly the same” I mean not only the scatter plot should be the same, I also want the same theme, axis titles, axis texts, grid lines, background colors, and texts with boxes in the figure. The two variables you should use are “raptor_offense” and “raptor_defense”. You don’t need to make the figure interactive. I have imported the data into R and am waiting for your code. Thanks!\nChatGPT: Here is the R code to replicate the figure using ggplot2. This code ensures that the scatter plot, background colors, quadrant labels, axis formatting, and overall aesthetics match the original figure.\n\n# Assuming your dataset is named 'data'\n# Define the quadrants based on raptor_offense and raptor_defense\ndata$quadrant &lt;- with(data, ifelse(raptor_offense &gt;= 0 & raptor_defense &gt;= 0, \"Positive Offense & Defense\",\n                            ifelse(raptor_offense &lt; 0 & raptor_defense &gt;= 0, \"Negative Offense & Positive Defense\",\n                            ifelse(raptor_offense &lt; 0 & raptor_defense &lt; 0, \"Negative Offense & Defense\",\n                                   \"Positive Offense & Negative Defense\"))))\n\n# Create the plot\nggplot(data, aes(x = raptor_offense, y = raptor_defense)) +\n  # Background colors for quadrants\n  annotate(\"rect\", xmin = -Inf, xmax = 0, ymin = -Inf, ymax = 0, fill = \"pink\", alpha = 0.3) +\n  annotate(\"rect\", xmin = 0, xmax = Inf, ymin = 0, ymax = Inf, fill = \"lightblue\", alpha = 0.3) +\n  annotate(\"rect\", xmin = -Inf, xmax = 0, ymin = 0, ymax = Inf, fill = \"white\", alpha = 0.3) +\n  annotate(\"rect\", xmin = 0, xmax = Inf, ymin = -Inf, ymax = 0, fill = \"white\", alpha = 0.3) +\n  \n  # Scatter plot\n  geom_point(color = \"black\", fill = \"white\", shape = 21, size = 3, stroke = 1) +\n  \n  # Axis labels\n  labs(x = \"Offensive RAPTOR rating\", y = \"Defensive RAPTOR rating\") +\n  \n  # Axis formatting\n  scale_x_continuous(limits = c(-10, 10), breaks = seq(-10, 10, 5)) +\n  scale_y_continuous(limits = c(-10, 10), breaks = seq(-10, 10, 5)) +\n  \n  # Add quadrant labels with colored backgrounds\n  annotate(\"text\", x = -7, y = -7, label = \"- offense\\n- defense\", color = \"black\",\n           fill = \"pink\", fontface = \"bold\", size = 5, hjust = 0.5, vjust = 0.5) +\n  annotate(\"text\", x = 7, y = 7, label = \"+ offense\\n+ defense\", color = \"black\",\n           fill = \"lightblue\", fontface = \"bold\", size = 5, hjust = 0.5, vjust = 0.5) +\n  annotate(\"text\", x = -7, y = 7, label = \"- offense\\n+ defense\", color = \"black\",\n           fill = \"lightblue\", fontface = \"bold\", size = 5, hjust = 0.5, vjust = 0.5) +\n  annotate(\"text\", x = 7, y = -7, label = \"+ offense\\n- defense\", color = \"black\",\n           fill = \"pink\", fontface = \"bold\", size = 5, hjust = 0.5, vjust = 0.5) +\n  \n  # Theme to match FiveThirtyEight style\n  theme_minimal(base_size = 14) +\n  theme(panel.grid.major = element_line(color = \"gray90\"),\n        panel.grid.minor = element_blank(),\n        panel.background = element_rect(fill = \"white\", color = NA),\n        plot.background = element_rect(fill = \"white\", color = NA),\n        axis.title = element_text(face = \"bold\"),\n        axis.text = element_text(face = \"bold\"))\n\nWarning in annotate(\"text\", x = -7, y = -7, label = \"- offense\\n- defense\", :\nIgnoring unknown parameters: `fill`\n\n\nWarning in annotate(\"text\", x = 7, y = 7, label = \"+ offense\\n+ defense\", :\nIgnoring unknown parameters: `fill`\n\n\nWarning in annotate(\"text\", x = -7, y = 7, label = \"- offense\\n+ defense\", :\nIgnoring unknown parameters: `fill`\n\n\nWarning in annotate(\"text\", x = 7, y = -7, label = \"+ offense\\n- defense\", :\nIgnoring unknown parameters: `fill`\n\n\n\n\n\n\n\n\n\nThis will generate a figure that closely matches the one on the FiveThirtyEight website, including the quadrant shading, labeled regions, scatter points, and overall aesthetic. Let me know if you need any adjustments!\nMe: Thank you for your help! But what you give me is slightly different from their figure. I will adjust the code manually.\nChatGPT: You’re welcome! That sounds like a great plan. You can fine-tune the details to match their figure exactly. Let me know if you need any further refinements or help adjusting specific elements. Happy coding!\nBased on what ChatGPT gave me, I then modified the code trying to make a more similar figure as posted on the website. My version is shown below.\n\n# My version of code\nggplot(data, aes(x = raptor_offense, y = raptor_defense)) +\n  annotate(\"rect\", xmin=-10, xmax=0, ymin=-10, ymax=0, fill=\"pink2\", alpha=.6) +\n  annotate(\"rect\", xmin=0, xmax=10, ymin=0, ymax=10, fill=\"cadetblue2\", alpha=.6) +\n  \n  geom_point(color=\"black\", fill=\"white\", shape=21, size=3.5, stroke=.85) +\n  \n  labs(x = \"Offensive RAPTOR rating\", y = \"Defensive RAPTOR rating\") +\n  \n  scale_x_continuous(limits=c(-10, 10), breaks=seq(-10, 10, 5), labels=c(\"-10\", \"-5\", \"0\", \"+5\", \"+10\")) +\n  scale_y_continuous(limits=c(-10, 10), breaks=seq(-10, 10, 5), labels=c(\"-10\", \"-5\", \"0\", \"+5\", \"+10\")) +\n  \n  annotate(\"label\", x=-7.5, y=-8, label=\"- offense \", color=\"black\",\n           fill = \"pink2\", label.size=0, size=3, vjust=.5) +\n  annotate(\"label\", x=-7.5, y=-9, label=\"- defense\", color=\"black\",\n           fill = \"pink2\", label.size=0, size=3, vjust=.5) +\n  annotate(\"label\", x=7.5, y=9, label=\"+ offense \", color=\"black\",\n           fill = \"cadetblue2\", label.size=0, size=3, vjust=.5) +\n  annotate(\"label\", x=7.5, y=8, label=\"+ defense\", color=\"black\",\n           fill = \"cadetblue2\", label.size=0, size=3, vjust=.5) +\n  annotate(\"label\", x=-7.5, y=9, label=\"- offense  \", color = \"black\",\n           fill = \"pink2\", label.size=0, size=3,  vjust=.5) +\n  annotate(\"label\", x=-7.5, y=8, label=\"+ defense\", color = \"black\",\n           fill = \"cadetblue2\", label.size=0, size=3, vjust=.5) +\n  annotate(\"label\", x=7.5, y=-8, label=\"+ offense\", color = \"black\",\n           fill = \"cadetblue2\", label.size=0, size=3, vjust=.5) +\n  annotate(\"label\", x=7.5, y=-9, label=\"- defense\", color = \"black\",\n           fill = \"pink2\", label.size=0, size=3, vjust=.5) +\n  \n  coord_fixed(ratio=1.15)+\n  \n  theme_minimal(base_size = 14) +\n  theme(panel.grid.major = element_line(color = \"gray90\", linewidth=.6),\n        panel.grid.minor = element_blank(),\n        panel.background = element_rect(fill = \"white\", color = NA),\n        plot.background = element_rect(fill = \"white\", color = NA),\n        axis.title = element_text(color=\"black\", size=10),\n        axis.text.x=element_text(color=\"gray50\", size=7.5, margin=margin(t=-3)),\n        axis.text.y=element_text(color=\"gray50\", size=7.5, margin=margin(t=-3)))\n\n\n\n\n\n\n\n\nI think my modified version looks more similar to the original figure on the website. Below I’m attaching the original one from the website for comparison.\n\n\n\n\n\n\n\nCreate a table using ChatGPT\nWith the widespread adoption of the “small ball” style in the NBA, the role of centers (position C) has evolved. The “small ball” strategy emphasizes speed, pace, and floor spacing, which exposes the traditional center’s lack of agility. I want to compare the RAPTOR indices of players who primarily play as centers versus those who do not.\nStill, I will start by asking ChatGPT to help me. My communication with ChatGPT and her code are attached below.\nMe: Next, I want to use this data to make a nice table output. I want to stratify observations by whether POSITION contains “C” (Center vs non-Center), and compare the median of variables from raptor_box_offense to war_total using Wilcoxon rank sum test. For the output table, the first column shows the name of these indices, labeled as “Box offense score”, “Box defense score”, “Box total score”, “On/Off offense score”, “On/Off defense score”, “On/Off total score”, “Comprehensive offense score”, “Comprehensive defense score”, “Comprehensive total score”, “Wins Above Replacement score” by order of the variables. The second column shows the median, 25th quantile, and 75th quantile of Center players (2 digits). The third column shows the histogram of the data in the second column by row (fill color: darkorange). The fourth column shows the median, 25th quantile, and 75th quantile of non-Center players (2 digits). The fifth column shows the histogram of the data in the fourth column by row (fill color: dodgerblue3). The last column shows the p-values (italic title) of test results (3 digits). The column titles for the two groups should be “Center” (color: darkorange) and “Non-Center” (color: dodgerblue3) and they should be bold. You can use packages such as gtsummary and gtExtras to do this.\nChatGPT: Here is the R code to create the formatted table using gtsummary, gt, and gtExtras. This will generate a stratified table comparing Centers vs. Non-Centers, including medians, interquartile ranges, histograms, and Wilcoxon test p-values.\n\n# ChatGPT gave me a code with error\n\nThis code will: Compare Centers vs. Non-Centers based on median and IQR. Display histograms for each group.Show Wilcoxon rank sum test p-values. Format the table with bold and colored group titles. Let me know if you need any refinements!\nMe: I just received an error about the ‘=’ in “Center = md(”Center”), Non-Center =“. Can you fix it?\nChatGPT: Here is the corrected R code. The issue was due to the Non-Center column name containing a hyphen (-). In gt(), column names with special characters should be enclosed in backticks (`). I’ve fixed that and ensured the table renders correctly.\n\n# Define variables of interest\nvars &lt;- c(\"raptor_box_offense\", \"raptor_box_defense\", \"raptor_box_total\",\n          \"raptor_onoff_offense\", \"raptor_onoff_defense\", \"raptor_onoff_total\",\n          \"raptor_offense\", \"raptor_defense\", \"raptor_total\", \"war_total\")\n\n# Rename for display\nvar_labels &lt;- c(\"Box offense score\", \"Box defense score\", \"Box total score\",\n                \"On/Off offense score\", \"On/Off defense score\", \"On/Off total score\",\n                \"Comprehensive offense score\", \"Comprehensive defense score\", \"Comprehensive total score\",\n                \"Wins Above Replacement score\")\n\n# Create Position Groups (Center vs. Non-Center)\ndata &lt;- data %&gt;%\n  mutate(Position_Group = ifelse(grepl(\"C\", POSITION), \"Center\", \"Non-Center\"))\n\n# Compute summary statistics\nsummary_data &lt;- data %&gt;%\n  group_by(Position_Group) %&gt;%\n  summarise(across(all_of(vars), list(\n    Median = ~ median(.x, na.rm = TRUE),\n    Q25 = ~ quantile(.x, 0.25, na.rm = TRUE),\n    Q75 = ~ quantile(.x, 0.75, na.rm = TRUE)\n  ))) %&gt;%\n  pivot_longer(-Position_Group, names_to = c(\"Variable\", \"Stat\"), names_sep = \"_\") %&gt;%\n  pivot_wider(names_from = Position_Group, values_from = value) %&gt;%\n  mutate(across(where(is.numeric), ~ round(.x, 2))) \n\nWarning: Expected 2 pieces. Additional pieces discarded in 30 rows [1, 2, 3, 4, 5, 6, 7,\n8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].\n\n\nWarning: Values from `value` are not uniquely identified; output will contain list-cols.\n• Use `values_fn = list` to suppress this warning.\n• Use `values_fn = {summary_fun}` to summarise duplicates.\n• Use the following dplyr code to identify duplicates.\n  {data} |&gt;\n  dplyr::summarise(n = dplyr::n(), .by = c(Variable, Stat, Position_Group)) |&gt;\n  dplyr::filter(n &gt; 1L)\n\n# Compute Wilcoxon p-values\np_values &lt;- data %&gt;%\n  summarise(across(all_of(vars), ~ wilcox.test(.x ~ Position_Group, data = data)$p.value)) %&gt;%\n  pivot_longer(everything(), names_to = \"Variable\", values_to = \"P_Value\") %&gt;%\n  mutate(P_Value = formatC(P_Value, format = \"f\", digits = 3)) \n\n# Merge summaries and p-values\ntable_data &lt;- summary_data %&gt;%\n  left_join(p_values, by = \"Variable\") %&gt;%\n  mutate(Variable = factor(Variable, levels = vars, labels = var_labels))\n\n# Create gt table\ntable_gt &lt;- table_data %&gt;%\n  gt(rowname_col = \"Variable\") %&gt;%\n  tab_spanner(label = md(\"**Center**\"), columns = `Center`) %&gt;%\n  tab_spanner(label = md(\"**Non-Center**\"), columns = `Non-Center`) %&gt;%\n  cols_label(\n    Variable = \"Statistic\",\n    `Center` = md(\"**Center**\"),\n    `Non-Center` = md(\"**Non-Center**\"),\n    P_Value = md(\"*P-value*\")\n  ) %&gt;%\n  tab_options(table.font.size = \"medium\")\n\n# Display table\ntable_gt\n\n\n\n\n\n\n\n\nStat\nCenter\nNon-Center\nP-value\n\n\nCenter\nNon-Center\n\n\n\n\nNA\nbox\n-0.90, -1.70, 0.20, 1.10, -0.15, 2.25, 0.40, -1.50, 2.00\n0.10, -1.10, 1.65, -0.20, -1.20, 0.70, 0.00, -1.50, 1.80\nNA\n\n\nNA\nonoff\n0.50, -0.45, 2.15, -0.20, -1.75, 1.35, 0.00, -2.10, 3.40\n0.30, -1.50, 2.10, 0.00, -1.40, 1.50, 0.20, -1.60, 2.65\nNA\n\n\nNA\noffense\n-0.50, -1.60, 0.45\n-0.1, -1.0, 1.8\nNA\n\n\nNA\ndefense\n1.00, -0.55, 2.15\n-0.2, -1.2, 0.8\nNA\n\n\nNA\ntotal\n0.60, -1.55, 2.00\n0.0, -1.5, 2.0\nNA\n\n\nNA\ntotal\n2.90, 1.05, 5.35\n2.80, 1.10, 5.15\nNA\n\n\n\n\n\n\n\nFixes: Used backticks (`) for column names with special characters (Non-Center). Used tab_spanner() to ensure correct formatting of group headers. This should now work as expected. Let me know if you need further refinements!\nMe: Thank you for your help. But what you gave me doesn’t meet my requirements. If I use what you just sent me, it could be a stain on my career. Actually I know how to make polished tables. I will do it myself. But still thanks.\nChatGPT: I appreciate your honesty, and I understand the importance of precision in your work. If you need any refinements or specific adjustments, feel free to let me know. Best of luck with your analysis, and I’m always here to help when needed.\nThe table that ChatGPT gave me is not right. Then I realized that this cannot be done using gt family packages. I don’t think it is even doable. Guess this is too hard for R. So, no blame on ChatGPT.\nActually, to make plots using gt family packages, the data to be plotted must be stored in lists. However, if I create new columns of lists, tbl_summary won’t be able to deal with it and generate a summary table. I will accomplish it in two steps. I will firstly generate a table with comparisons between the two groups. Then I will create another table that contains the density plots I want.\n\n# Create Position Groups (Center vs. Non-Center)\ndata &lt;- data %&gt;%\n  mutate(Group=ifelse(grepl(\"C\", POSITION), \"Center players\", \"Non-Center players\"))\n\n# Make the first table\nnba_tab &lt;- data %&gt;% \n  select(Group, raptor_box_offense:war_total) %&gt;%\n  tbl_summary(by=Group, type=list(where(is.numeric) ~ \"continuous\"),\n              statistic=list(all_continuous() ~ \"{median} ({p25}, {p75})\"),\n              digits=all_continuous() ~ 2,\n              label=list(raptor_box_offense ~ \"Box offense score\",\n                         raptor_box_defense ~ \"Box defense score\",\n                         raptor_box_total ~ \"Box total score\",\n                         raptor_onoff_offense ~ \"On/Off offense score\",\n                         raptor_onoff_defense ~ \"On/Off defense score\",\n                         raptor_onoff_total ~ \"On/Off total score\",\n                         raptor_offense ~ \"Comprehensive offense score\",\n                         raptor_defense ~ \"Comprehensive defense score\",\n                         raptor_total ~ \"Comprehensive total score\",\n                         war_total ~ \"Wins Above Replacement score\")) %&gt;%\n  add_p(test=all_continuous() ~ \"wilcox.test\", pvalue_fun=function(x) style_number(x, digits=3)) %&gt;%\n  modify_header(label=\"**Index**\", p.value=\"*p*-value\") %&gt;%\n  as_gt() %&gt;%\n  tab_style_body(style=cell_fill(color=\"lightskyblue1\"), values=\"Box total score\") %&gt;% \n  tab_style_body(style=cell_fill(color=\"palevioletred1\"), values=\"On/Off total score\") %&gt;%\n  tab_style_body(style=cell_fill(color=\"palegreen1\"), values=\"Comprehensive total score\") %&gt;%\n  tab_style_body(style=cell_fill(color=\"gold1\"), values=\"Wins Above Replacement score\") %&gt;%\n  tab_style(style=cell_text(weight=\"bold\"), \n            locations=cells_body(columns=p.value, rows=as.numeric(p.value)&lt;0.05)) %&gt;%\n  tab_options(table.font.names=\"Times New Roman\")\n\n# Output the table\nnba_tab\n\n\n\n\n\n\n\nIndex\nCenter players, N = 551\nNon-Center players, N = 1951\np-value2\n\n\n\n\nBox offense score\n-0.90 (-1.70, 0.20)\n0.10 (-1.10, 1.65)\n0.001\n\n\nBox defense score\n1.10 (-0.15, 2.25)\n-0.20 (-1.20, 0.70)\n0.000\n\n\nBox total score\n0.40 (-1.50, 2.00)\n0.00 (-1.50, 1.80)\n0.702\n\n\nOn/Off offense score\n0.50 (-0.45, 2.15)\n0.30 (-1.50, 2.10)\n0.255\n\n\nOn/Off defense score\n-0.20 (-1.75, 1.35)\n0.00 (-1.40, 1.50)\n0.652\n\n\nOn/Off total score\n0.00 (-2.10, 3.40)\n0.20 (-1.60, 2.65)\n0.708\n\n\nComprehensive offense score\n-0.50 (-1.60, 0.45)\n-0.10 (-1.00, 1.80)\n0.022\n\n\nComprehensive defense score\n1.00 (-0.55, 2.15)\n-0.20 (-1.20, 0.80)\n0.000\n\n\nComprehensive total score\n0.60 (-1.55, 2.00)\n0.00 (-1.50, 2.00)\n0.615\n\n\nWins Above Replacement score\n2.90 (1.05, 5.35)\n2.80 (1.10, 5.15)\n0.859\n\n\n\n1 Median (IQR)\n\n\n2 Wilcoxon rank sum test\n\n\n\n\n\n\n\n\n\n# Make the second table\n# nba_tab_c &lt;- data %&gt;%\n#   select(Group, raptor_box_offense:war_total) %&gt;%\n#   pivot_longer(-Group, names_to=\"vars\", values_to=\"vals\") %&gt;%\n#   mutate(vars=recode(vars,\n#                      raptor_box_offense=\"Box Offense Score\",\n#                      raptor_box_defense=\"Box Defense Score\",\n#                      raptor_box_total=\"Box Total Score\",\n#                      raptor_onoff_offense=\"On/Off Offense Score\",\n#                      raptor_onoff_defense=\"On/Off Defense Score\",\n#                      raptor_onoff_total=\"On/Off Total Score\",\n#                      raptor_offense=\"Comprehensive Offense Score\",\n#                      raptor_defense=\"Comprehensive Defense Score\",\n#                      raptor_total=\"Comprehensive Total Score\",\n#                      war_total=\"Wins Above Replacement Score\")) %&gt;%\n#   group_by(Group, vars) %&gt;%\n#   summarize(median=round(median(vals), 2),\n#             Q1=round(quantile(vals, .25), 2),\n#             Q3=round(quantile(vals, .75), 2),\n#             datalist=list(vals)) %&gt;%\n#   gt() %&gt;%\n#   gt_plt_dist(datalist, type=\"density\",\n#               line_color=\"firebrick4\", fill_color=\"lightpink1\",\n#               same_limit=F) %&gt;%\n#   tab_style(style=cell_fill(color=\"lightskyblue\"),\n#             locations=cells_body(rows=Group==\"Center players\")) %&gt;%\n#   tab_style(style=cell_fill(color=\"lightgreen\"),\n#             locations=cells_body(rows=Group==\"Non-Center players\")) %&gt;%\n#   cols_label(vars=md(\"**Index**\"),\n#              median=md(\"**Median**\"),\n#              Q1=md(\"**25th Percentile**\"),\n#              Q3=md(\"**75th Percentile**\"),\n#              datalist=md(\"**Density Plot**\")) %&gt;%\n#   tab_options(table.font.names=\"Times New Roman\")\n\n# Ouput the table\n# nba_tab_c\n\nThe code chunk above runs perfectly on my local lap-top. However, whenever I tried to render it into HTML, it keeps saying cannot find the package “gtExtras”. I checked everything to make sure this package is accurately installed in my library folder. It just wouldn’t work. Here I’m attaching the output table as a figure below.\n\n\n\n\n\nI searched the Internet and didn’t find anybody doing the same thing as I’m doing. It has taken me over 40 hrs to solve it so I decided not to be stuck here. I will just make another version of table with plots in it.\n\n# Make the second table in a different way\nnba_tab_c &lt;- data %&gt;%\n  select(Group, raptor_box_offense:war_total) %&gt;%\n  pivot_longer(-Group, names_to=\"vars\", values_to=\"vals\") %&gt;%\n  mutate(vars=recode(vars,\n                     raptor_box_offense=\"Box Offense Score\",\n                     raptor_box_defense=\"Box Defense Score\",\n                     raptor_box_total=\"Box Total Score\",\n                     raptor_onoff_offense=\"On/Off Offense Score\",\n                     raptor_onoff_defense=\"On/Off Defense Score\",\n                     raptor_onoff_total=\"On/Off Total Score\",\n                     raptor_offense=\"Comprehensive Offense Score\",\n                     raptor_defense=\"Comprehensive Defense Score\",\n                     raptor_total=\"Comprehensive Total Score\",\n                     war_total=\"Wins Above Replacement Score\")) %&gt;%\n  nest_by(Group, vars) %&gt;%\n  mutate(median=round(median(data$vals), 2),\n         Q1=round(quantile(data$vals, .25), 2),\n         Q3=round(quantile(data$vals, .75), 2),\n         dens=list(ggplot(data, aes(vals))+\n                     geom_density(color=\"purple4\",\n                                  fill=\"palevioletred1\")+\n                     theme_void()), .keep=\"unused\") %&gt;%\n  ungroup %&gt;%\n  mutate(ggplot=NA) %&gt;%\n  {dat &lt;- .\n  dat %&gt;%\n    select(-dens) %&gt;%\n    gt() %&gt;%\n    text_transform(locations=cells_body(c(ggplot)),\n                 fn=function(x){map(dat$dens, ggplot_image, height=50)})\n  } %&gt;%\n  tab_style(style=cell_fill(color=\"lightskyblue1\", alpha=.2),\n            locations=cells_body(rows=Group==\"Center players\")) %&gt;%\n  tab_style(style=cell_fill(color=\"palegreen1\", alpha=.2),\n            locations=cells_body(rows=Group==\"Non-Center players\")) %&gt;%\n  cols_label(vars=md(\"**Index**\"),\n             median=md(\"**Median**\"),\n             Q1=md(\"**25th Percentile**\"),\n             Q3=md(\"**75th Percentile**\"),\n             ggplot=md(\"**Density Plot**\")) %&gt;%\n  tab_options(table.font.names=\"Times New Roman\")\n\n# Ouput the table\nnba_tab_c\n\n\n\n\n\n\n\nGroup\nIndex\nMedian\n25th Percentile\n75th Percentile\nDensity Plot\n\n\n\n\nCenter players\nBox Defense Score\n1.1\n-0.15\n2.25\n\n\n\nCenter players\nBox Offense Score\n-0.9\n-1.70\n0.20\n\n\n\nCenter players\nBox Total Score\n0.4\n-1.50\n2.00\n\n\n\nCenter players\nComprehensive Defense Score\n1.0\n-0.55\n2.15\n\n\n\nCenter players\nComprehensive Offense Score\n-0.5\n-1.60\n0.45\n\n\n\nCenter players\nComprehensive Total Score\n0.6\n-1.55\n2.00\n\n\n\nCenter players\nOn/Off Defense Score\n-0.2\n-1.75\n1.35\n\n\n\nCenter players\nOn/Off Offense Score\n0.5\n-0.45\n2.15\n\n\n\nCenter players\nOn/Off Total Score\n0.0\n-2.10\n3.40\n\n\n\nCenter players\nWins Above Replacement Score\n2.9\n1.05\n5.35\n\n\n\nNon-Center players\nBox Defense Score\n-0.2\n-1.20\n0.70\n\n\n\nNon-Center players\nBox Offense Score\n0.1\n-1.10\n1.65\n\n\n\nNon-Center players\nBox Total Score\n0.0\n-1.50\n1.80\n\n\n\nNon-Center players\nComprehensive Defense Score\n-0.2\n-1.20\n0.80\n\n\n\nNon-Center players\nComprehensive Offense Score\n-0.1\n-1.00\n1.80\n\n\n\nNon-Center players\nComprehensive Total Score\n0.0\n-1.50\n2.00\n\n\n\nNon-Center players\nOn/Off Defense Score\n0.0\n-1.40\n1.50\n\n\n\nNon-Center players\nOn/Off Offense Score\n0.3\n-1.50\n2.10\n\n\n\nNon-Center players\nOn/Off Total Score\n0.2\n-1.60\n2.65\n\n\n\nNon-Center players\nWins Above Replacement Score\n2.8\n1.10\n5.15"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yang’s website and data analysis portfolio",
    "section": "",
    "text": "This website is for EPID/BIOS 8060E.\n\nHi there!\n\nMy name is Guozheng Yang.\n\n\nI’m a first-year PhD student at UGA.\n\n\nI’m in the Epid & Bios department.\nWelcome to my website and data analysis portfolio.\n\nPlease use the Menu Bar above to look around.\nHave fun!"
  },
  {
    "objectID": "data-exercise/data-exercise.html",
    "href": "data-exercise/data-exercise.html",
    "title": "Exercise Using Synthetic Data",
    "section": "",
    "text": "Below is an exercise for simulating data and exploring associations between variables.\n\nIntroduction\nIn this exercise, I will try to simulate a data (N=600) about malaria transmission. Mosquito feeding assays are widely used to assess malaria patients’ infectiousness to mosquitoes. With a number of mosquitoes fed on a patient’s blood, we can dissected the mosquitoes and check the number of positive ones to evaluate mosquito infection rates. Previous studies have found that human-to-mosquito infectiousness is positively associated with gametocyte densities in blood. School-aged children were also found to have higher infectiousness compared to older adults.\nThe expected response variable is the number of positive mosquitoes generated from a Poisson distribution. As this is a count variable, I will use Poisson regression to validate my simulation. The number of dissected mosquitoes will set as a fixed integer for each observation, and it will be used as the offset in Poisson regression. Logarithmic gametocyte densities will be generated using a truncated normal distribution, as a great proportion of transmission happened at low densities. Age group is a binary variable and will be generated through a Binomial distribution.\n\n\nLoad required packages\n\n# Load required package\nlibrary(truncnorm) # Generate truncated normal distribution\n\nWarning: package 'truncnorm' was built under R version 4.2.3\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\nlibrary(scales) # Modify axis text\n\nWarning: package 'scales' was built under R version 4.2.3\n\n\n\n\nSimulate data\nI will generate logarithmic gametocyte densities and age groups first. The logarithmic gametocyte densities are from a truncated normal distribution. According to previous literature, the detection limit for gametocyte densities could be as low as \\(10^{-2}/uL\\) using molecular methods. The maximum gametocyte density could be as high as \\(10^{4}/uL\\). Hence, I set the mean at -1, standard error equal to 1.2, and the left truncation limit at 0.01.\nTo balance the sample size in each age group, I will use a Binomial distribution with p=0.5. School-aged children are marked as 1, while older adults are marked as 0. The number of dissected mosquitoes will be set at 100 for each observation.\nTo make my simulation reproducible, I will set a seed 8060. The simulated predictors are put in a data frame called sim.\n\n# Set a seed\nset.seed(8060)\n# Simulate predictors: gametocyte density, age group, and dissection.\nsim &lt;- data.frame(game=rtruncnorm(n=600, a=-2, b=Inf, mean=-1, sd=1.2),\n                  school=rbinom(n=600, size=1, prob=.5),\n                  dissect=100)\n\nNow I want to model the mean of positive mosquitoes by the predictors, following the regression model:\n\\[\n\\log(\\lambda) = \\beta_0 + \\beta_1*Gametocyte + \\beta_2*Children + \\log(dissection)\n\\]\nwhere \\(\\lambda\\) denotes the expected number of positive mosquitoes and \\(dissection\\) denotes the number of dissected mosquitoes. \\(\\beta_0\\) is an intercept while \\(\\beta_1\\) and \\(\\beta_2\\) represent the coefficients for logarithmic gametocyte densities and school-aged children.\nHere, I set \\(\\beta_0=-0.8\\), \\(\\beta_1=0.1\\), \\(\\beta_2=0.2\\), and then simulate the response variable.\n\n# Pre-assumed parameters\nb0 &lt;- -0.8\nb1 &lt;- 0.1\nb2 &lt;- 0.2\n\n# Simulate response: number of positive mosquitoes\nsim$positive &lt;- rpois(n=600, lambda=exp(b0+b1*sim$game+b2*sim$school+log(sim$dissect)))\n\n\n\nDescriptive analysis\nFirst of all, I want to get an overview of the simulated data, especially the distribution of each variable.\n\n# Check the distribution of each variable\nsummary(sim)\n\n      game              school          dissect       positive    \n Min.   :-1.99805   Min.   :0.0000   Min.   :100   Min.   :22.00  \n 1st Qu.:-1.32983   1st Qu.:0.0000   1st Qu.:100   1st Qu.:41.00  \n Median :-0.68939   Median :1.0000   Median :100   Median :47.00  \n Mean   :-0.57912   Mean   :0.5233   Mean   :100   Mean   :47.79  \n 3rd Qu.: 0.06976   3rd Qu.:1.0000   3rd Qu.:100   3rd Qu.:53.00  \n Max.   : 3.42673   Max.   :1.0000   Max.   :100   Max.   :84.00  \n\n\nAs shown, all variables are within a reasonable range. Most importantly, the maximum number of positive mosquitoes is less than the number of mosquitoes dissected. Now I want to look at the association between mosquito infection rate and the two predictors.\nFirst of all, I want to make a scatterplot for mosquito infection rate and gametocyte density.\n\n# Define mosquito infection rate\nsim$infxn_rate &lt;- sim$positive / sim$dissect\n\n# Scatterplot: infxn_rate ~ game\nscatterplot &lt;- ggplot(sim, aes(x=game, y=infxn_rate))+\n  geom_point(size=2, color=\"firebrick4\")+\n  scale_x_continuous(breaks=seq(-2, 4, 1), labels=label_math(10^.x))+\n  scale_y_continuous(breaks=seq(0, 1, 0.1), labels=seq(0, 100, 10))+\n  labs(x=\"Gametocyte density/uL\", y=\"Mosquito infection rate(%)\")+\n  theme_bw()+\n  theme(axis.title.x=element_text(size=15, color=\"black\", face=\"bold\"),\n        axis.title.y=element_text(size=15, color=\"black\", face=\"bold\"),\n        axis.text.x=element_text(color=\"black\", size=12),\n        axis.text.y=element_text(color=\"black\", size=12))\nscatterplot\n\n\n\n\n\n\n\n\nAs expected, mosquito infection rate is positively associated with gametocyte density. Next, I want to check the distribution of mosquito infection rates in different age groups through grouped boxplots.\n\n# Boxplot: infxn_rate ~ school\nboxplot &lt;- ggplot(sim, aes(x=as.factor(school), y=infxn_rate))+\n  geom_boxplot(width=.5, color=\"firebrick4\")+\n  scale_x_discrete(breaks=c(0, 1), \n                   labels=c(\"Older adults\", \"School-aged children\"))+\n  scale_y_continuous(breaks=seq(0, 1, 0.1), labels=seq(0, 100, 10))+\n  labs(x=\"Age group\", y=\"Mosquito infection rate(%)\")+\n  theme_bw()+\n  theme(axis.title.x=element_text(size=15, color=\"black\", face=\"bold\"),\n        axis.title.y=element_text(size=15, color=\"black\", face=\"bold\"),\n        axis.text.x=element_text(color=\"black\", size=12),\n        axis.text.y=element_text(color=\"black\", size=12))\nboxplot\n\n\n\n\n\n\n\n\nAs shown in the boxplot, school-aged children have higher mosquito infection rates compared to older adults. Hence, the association between the response and two predictors are validated.\n\n\nModel fitting\nAs I generated the simulated data by Poisson distribution, now I will fit a Poisson regression to check if the association holds. The response variable is the number of positive mosquitoes. The two predictors are gametocyte density and age group. The number of dissected mosquitoes is used as an offset.\n\n# Fit Poisson regression\nfit &lt;- glm(positive ~ game + school, offset=log(dissect), family='poisson', data=sim)\nsummary(fit)\n\n\nCall:\nglm(formula = positive ~ game + school, family = \"poisson\", data = sim, \n    offset = log(dissect))\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-2.8998  -0.6851  -0.0523   0.6511   3.3411  \n\nCoefficients:\n             Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept) -0.784526   0.009567  -82.01   &lt;2e-16 ***\ngame         0.097118   0.006142   15.81   &lt;2e-16 ***\nschool       0.179669   0.011933   15.06   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 1110.54  on 599  degrees of freedom\nResidual deviance:  620.68  on 597  degrees of freedom\nAIC: 4040\n\nNumber of Fisher Scoring iterations: 4\n\n# 95% confidence intervals for parameters\nconfint(fit)\n\nWaiting for profiling to be done...\n\n\n                  2.5 %     97.5 %\n(Intercept) -0.80333001 -0.7658289\ngame         0.08506688  0.1091433\nschool       0.15629267  0.2030714\n\n\nAs shown in the output, the parameter estimates are close to true values I set initially. The 95% confidence intervals also covered the true values. Now I want to see if a larger sample size will make the estimates closer to the true values. I will raise the sample size to 2000 and repeat the simulation and regression steps.\n\n# Set a seed\nset.seed(8060)\n# Simulate the data again but sample size reset to 2000.\nsim2 &lt;- data.frame(game=rtruncnorm(n=2000, a=-2, b=Inf, mean=-1, sd=1.2),\n                   school=rbinom(n=2000, size=1, prob=.5),\n                   dissect=100)\nsim2$positive &lt;- rpois(n=2000, lambda=exp(b0+b1*sim2$game+b2*sim2$school+log(sim2$dissect)))\n\n# Fit Poisson regression\nfit2 &lt;- glm(positive ~ game + school, offset=log(dissect), family='poisson', data=sim2)\nsummary(fit2)\n\n\nCall:\nglm(formula = positive ~ game + school, family = \"poisson\", data = sim2, \n    offset = log(dissect))\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-3.1875  -0.7049  -0.0214   0.6563   3.5394  \n\nCoefficients:\n             Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept) -0.797066   0.005158 -154.52   &lt;2e-16 ***\ngame         0.104900   0.003373   31.10   &lt;2e-16 ***\nschool       0.202608   0.006541   30.98   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 3972.7  on 1999  degrees of freedom\nResidual deviance: 2088.7  on 1997  degrees of freedom\nAIC: 13454\n\nNumber of Fisher Scoring iterations: 4\n\n# 95% confidence intervals for parameters\nconfint(fit2)\n\nWaiting for profiling to be done...\n\n\n                  2.5 %     97.5 %\n(Intercept) -0.80719288 -0.7869720\ngame         0.09828507  0.1115053\nschool       0.18979213  0.2154313\n\n\nWhen the sample size is raised to 2000, the parameter estimates are closer to the true values. Also, the 95% confidence intervals are narrower."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html",
    "href": "cdcdata-exercise/cdcdata-exercise.html",
    "title": "Data Analysis Exercise",
    "section": "",
    "text": "Below is an exercise for analyzing a dataset from the CDC website."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#death_total",
    "href": "cdcdata-exercise/cdcdata-exercise.html#death_total",
    "title": "Data Analysis Exercise",
    "section": "death_total",
    "text": "death_total\nLet’s start from death_total. As its scale is too large, I will take the log-transformation first.\n\n# Histogram of log death_total\nhist_death_total &lt;- ggplot(data, aes(x=log(death_total, 10)))+\n  geom_histogram(binwidth=.1, fill=\"firebrick1\", color=\"black\", alpha=.8)+\n  labs(x=\"Log - Total deaths\", y=\"Count\")+\n  theme_bw()+\n  theme(axis.title.x=element_text(size=15, color=\"black\", face=\"bold\"),\n        axis.title.y=element_text(size=15, color=\"black\", face=\"bold\"),\n        axis.text.x=element_text(color=\"black\", size=12),\n        axis.text.y=element_text(color=\"black\", size=12))\nhist_death_total\n\n\n\n\n\n\n\n\nAccording to the histogram, log-transformed death_total is left skewed, with one obvious peak. It could be a weibull distribution or a gamma distribution. Now I want to fit this two distribution and select the best one based on log-likelihood value.\n\n# Fit weibull distribution for log death_total\nfit_wb &lt;- fitdist(log(data$death_total, 10), \"weibull\")\nsummary(fit_wb)\n\nFitting of the distribution ' weibull ' by maximum likelihood \nParameters : \n      estimate  Std. Error\nshape 9.025147 0.124622061\nscale 3.703996 0.007768309\nLoglikelihood:  -1890.841   AIC:  3785.681   BIC:  3797.766 \nCorrelation matrix:\n          shape     scale\nshape 1.0000000 0.3207625\nscale 0.3207625 1.0000000\n\n\n\n# Fit gamma distribution for log death_total\nfit_gm &lt;- fitdist(log(data$death_total, 10), \"gamma\")\nsummary(fit_gm)\n\nFitting of the distribution ' gamma ' by maximum likelihood \nParameters : \n      estimate Std. Error\nshape 59.95946  1.5160752\nrate  17.08149  0.4337126\nLoglikelihood:  -1935.506   AIC:  3875.011   BIC:  3887.097 \nCorrelation matrix:\n          shape      rate\nshape 1.0000000 0.9958336\nrate  0.9958336 1.0000000\n\n\nAccording to two fitting results, the weibull distribution can better fit the log-transformed death_total (log-likelihood=-1890.841 vs -1935.506). The shape parameter is 9.03 and the scale parameter is 3.70."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#death_pna",
    "href": "cdcdata-exercise/cdcdata-exercise.html#death_pna",
    "title": "Data Analysis Exercise",
    "section": "death_pna",
    "text": "death_pna\nNow, let’s repeat the above steps for death_pna. Again, this variable will be log-transformed.\n\n# Histogram of log death_pna\nhist_death_pna &lt;- ggplot(data, aes(x=log(death_pna, 10)))+\n  geom_histogram(binwidth=.1, fill=\"skyblue1\", color=\"black\", alpha=.8)+\n  labs(x=\"Log - Pneumonia deaths\", y=\"Count\")+\n  theme_bw()+\n  theme(axis.title.x=element_text(size=15, color=\"black\", face=\"bold\"),\n        axis.title.y=element_text(size=15, color=\"black\", face=\"bold\"),\n        axis.text.x=element_text(color=\"black\", size=12),\n        axis.text.y=element_text(color=\"black\", size=12))\nhist_death_pna\n\n\n\n\n\n\n\n\nThough there is likely a bimodal pattern, this variable is generally symmetric and likely to follow a normal distribution. Now I will fit a normal distribution to this variable and estimate the parameters.\n\n# Fit normal distribution for log death_pna\nfit_norm &lt;- fitdist(log(data$death_pna, 10), \"norm\")\nsummary(fit_norm)\n\nFitting of the distribution ' norm ' by maximum likelihood \nParameters : \n      estimate  Std. Error\nmean 2.3610877 0.009098526\nsd   0.5074825 0.006433517\nLoglikelihood:  -2304.148   AIC:  4612.296   BIC:  4624.381 \nCorrelation matrix:\n     mean sd\nmean    1  0\nsd      0  1\n\n\nHence, the log-transformed death_pna is likely to follow a normal distribution with mean=2.36 and sd=0.51."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#death_flu",
    "href": "cdcdata-exercise/cdcdata-exercise.html#death_flu",
    "title": "Data Analysis Exercise",
    "section": "death_flu",
    "text": "death_flu\nNext, let’s get the histogram for death_flu. As a great proportion of values in this variable are 0, I will take the distribution of this variable hierarchically: 1. determine the probability of 0 vs &gt;0 values; 2. determine the distribution of &gt;0 values. Let’s generate an indicator variable to check how many values are 0.\n\n# Generate an indicator variable for death_flu\n# Estimate the probability for 0 vs &gt;0\ndata2 &lt;- data %&gt;% \n  mutate(death_flu01=ifelse(death_flu==0, 0, 1)) %&gt;%\n  filter(!is.na(death_flu01))\n\nbar_death_flu01 &lt;- ggplot(data2, aes(x=factor(death_flu01)))+\n  geom_bar(aes(y=..count../sum(..count..)), fill=\"darkorange\", color=\"black\", width=.5)+\n  geom_text(aes(y=..count../sum(..count..), label=scales::percent(..count../sum(..count..))), \n            stat=\"count\", size=5, vjust=1.5, fontface=\"bold\")+\n  scale_x_discrete(breaks=c(0, 1), labels=c(\"0\", \"&gt;0\"))+\n  scale_y_continuous(labels=scales::percent_format())+\n  labs(x=\"Log - Influenza deaths: 0 vs &gt;0\", y=\"Proportion\")+\n  theme_bw()+\n  theme(axis.title.x=element_text(size=15, color=\"black\", face=\"bold\"),\n        axis.title.y=element_text(size=15, color=\"black\", face=\"bold\"),\n        axis.text.x=element_text(color=\"black\", size=12),\n        axis.text.y=element_text(color=\"black\", size=12))\nbar_death_flu01\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\n\n\n\n\n\n\n\nAs shown, the probability for 0 influenza deaths is 0.52, which is also the estimate for a binomial distribution. For &gt;0 influenza deaths, I will make a histogram to show its distribution.\n\n# Filter out death_flu &gt; 0\n# Make a histogram for the &gt;0 values\ndata3 &lt;- data2 %&gt;% filter(death_flu01==1)\n\nhist_death_flu1 &lt;- ggplot(data3, aes(x=log(death_flu, 10)))+\n  geom_histogram(binwidth=.1, fill=\"seagreen2\", color=\"black\", alpha=.8)+\n  labs(x=\"Log - Influenza deaths\", y=\"Count\")+\n  theme_bw()+\n  theme(axis.title.x=element_text(size=15, color=\"black\", face=\"bold\"),\n        axis.title.y=element_text(size=15, color=\"black\", face=\"bold\"),\n        axis.text.x=element_text(color=\"black\", size=12),\n        axis.text.y=element_text(color=\"black\", size=12))\nhist_death_flu1\n\n\n\n\n\n\n\n\nAccording to the histogram above, the &gt;0 influenza deaths generally follows a weibull or a gamma distribution. Still, I will fit both and determine the best fit by log-likelihood.\n\n# Fit weibull distribution for &gt;0 log death_flu\nfit_wb2 &lt;- fitdist(log(data3$death_flu, 10), \"weibull\")\nsummary(fit_wb2)\n\nFitting of the distribution ' weibull ' by maximum likelihood \nParameters : \n      estimate Std. Error\nshape 4.445396  0.1202325\nscale 1.591791  0.0139997\nLoglikelihood:  -274.4729   AIC:  552.9458   BIC:  562.151 \nCorrelation matrix:\n          shape     scale\nshape 1.0000000 0.3352461\nscale 0.3352461 1.0000000\n\n\n\n# Fit gamma distribution for &gt;0 log death_flu\nfit_gm2 &lt;- fitdist(log(data3$death_flu, 10), \"gamma\")\nsummary(fit_gm2)\n\nFitting of the distribution ' gamma ' by maximum likelihood \nParameters : \n      estimate Std. Error\nshape 19.19297  0.9912574\nrate  13.18830  0.6901021\nLoglikelihood:  -220.5901   AIC:  445.1802   BIC:  454.3854 \nCorrelation matrix:\n         shape     rate\nshape 1.000000 0.987006\nrate  0.987006 1.000000\n\n\nAs shown, the gamma distribution is better when influenza deaths is &gt;0 (log-likelihood=-220 vs-274). The estimated shape parameter is 19.19 and the rate parameter is 13.19."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#death_covid",
    "href": "cdcdata-exercise/cdcdata-exercise.html#death_covid",
    "title": "Data Analysis Exercise",
    "section": "death_covid",
    "text": "death_covid\nNext, let’s do the same thing to death_covid. As not too many values are 0, I will just add 1 to each value in this variable. Based on its scale and the log-transformation, adding 1 will not make a big change to it. Let’s start by cleaning the NAs and making a histogram.\n\n# Clean the missing values in death_covid\ndata4 &lt;- data %&gt;% filter(!is.na(death_covid))\n\n# Histogram of log death_covid+1\nhist_death_covid &lt;- ggplot(data4, aes(x=log(death_covid+1, 10)))+\n  geom_histogram(binwidth=.2, fill=\"palevioletred\", color=\"black\", alpha=.8)+\n  labs(x=\"Log - COVID deaths\", y=\"Count\")+\n  theme_bw()+\n  theme(axis.title.x=element_text(size=15, color=\"black\", face=\"bold\"),\n        axis.title.y=element_text(size=15, color=\"black\", face=\"bold\"),\n        axis.text.x=element_text(color=\"black\", size=12),\n        axis.text.y=element_text(color=\"black\", size=12))\nhist_death_covid\n\n\n\n\n\n\n\n\nAccording to the histogram, the log-transformed death_covid is generally normally distributed. I will fit a normal distribution to it and estimate the parameters.\n\n# Fit normal distribution for log death_covid+1\nfit_norm2 &lt;- fitdist(log(data4$death_covid+1, 10), \"norm\")\nsummary(fit_norm2)\n\nFitting of the distribution ' norm ' by maximum likelihood \nParameters : \n      estimate Std. Error\nmean 2.0842417 0.01312792\nsd   0.7130286 0.00928276\nLoglikelihood:  -3188.079   AIC:  6380.158   BIC:  6392.137 \nCorrelation matrix:\n     mean sd\nmean    1  0\nsd      0  1\n\n\nHence, the log-transformed death_covid is likely to follow a normal distribution with mean=2.08 and sd=0.71."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#death_pna_covid",
    "href": "cdcdata-exercise/cdcdata-exercise.html#death_pna_covid",
    "title": "Data Analysis Exercise",
    "section": "death_pna_covid",
    "text": "death_pna_covid\nAgain, the same thing for death_pna_covid. I will clean the NAs first and then add 1 to this variable.\n\n# Clean the missing values in death_pna_covid\ndata5 &lt;- data %&gt;% filter(!is.na(death_pna_covid))\n\n# Histogram of log death_pna_covid+1\nhist_death_pna_covid &lt;- ggplot(data5, aes(x=log(death_pna_covid+1, 10)))+\n  geom_histogram(binwidth=.2, fill=\"steelblue4\", color=\"black\", alpha=.8)+\n  labs(x=\"Log - Pneumonia & COVID deaths\", y=\"Count\")+\n  theme_bw()+\n  theme(axis.title.x=element_text(size=15, color=\"black\", face=\"bold\"),\n        axis.title.y=element_text(size=15, color=\"black\", face=\"bold\"),\n        axis.text.x=element_text(color=\"black\", size=12),\n        axis.text.y=element_text(color=\"black\", size=12))\nhist_death_pna_covid\n\n\n\n\n\n\n\n\nSince it’s generally a bell shape, I will estimate the mean and sd for the normal distribution.\n\n# Fit normal distribution for log death_pna_covid+1\nfit_norm3 &lt;- fitdist(log(data5$death_pna_covid+1, 10), \"norm\")\nsummary(fit_norm3)\n\nFitting of the distribution ' norm ' by maximum likelihood \nParameters : \n      estimate  Std. Error\nmean 1.8217539 0.013730000\nsd   0.6987477 0.009708486\nLoglikelihood:  -2746.625   AIC:  5497.25   BIC:  5508.969 \nCorrelation matrix:\n     mean sd\nmean    1  0\nsd      0  1\n\n\nHence, the log-transformed death_pna_covid is likely to follow a normal distribution with mean=1.82 and sd=0.70."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#death_pna_flu_covid",
    "href": "cdcdata-exercise/cdcdata-exercise.html#death_pna_flu_covid",
    "title": "Data Analysis Exercise",
    "section": "death_pna_flu_covid",
    "text": "death_pna_flu_covid\nLast, for death_pna_flu_covid, no NAs or 0s exist. I will directly make a histogram for it.\n\n# Histogram of log death_pna_flu_covid\nhist_death_pna_flu_covid &lt;- ggplot(data, aes(x=log(death_pna_flu_covid, 10)))+\n  geom_histogram(binwidth=.1, fill=\"darkseagreen3\", color=\"black\", alpha=.8)+\n  labs(x=\"Log - Pneumonia & Influenza & COVID deaths\", y=\"Count\")+\n  theme_bw()+\n  theme(axis.title.x=element_text(size=15, color=\"black\", face=\"bold\"),\n        axis.title.y=element_text(size=15, color=\"black\", face=\"bold\"),\n        axis.text.x=element_text(color=\"black\", size=12),\n        axis.text.y=element_text(color=\"black\", size=12))\nhist_death_pna_flu_covid\n\n\n\n\n\n\n\n\nAs shown in the histogram, it generally looks like a normal distribution. Now I’m estimating the parameters for this normal distribution.\n\n# Fit normal distribution for log death_pna_flu_covid\nfit_norm4 &lt;- fitdist(log(data$death_pna_flu_covid, 10), \"norm\")\nsummary(fit_norm4)\n\nFitting of the distribution ' norm ' by maximum likelihood \nParameters : \n      estimate  Std. Error\nmean 2.4999735 0.009433313\nsd   0.5261557 0.006670251\nLoglikelihood:  -2416.564   AIC:  4837.128   BIC:  4849.213 \nCorrelation matrix:\n     mean sd\nmean    1  0\nsd      0  1\n\n\nHence, the log-transformed death_pna_flu_covid is likely to follow a normal distribution with mean=2.50 and sd=0.53."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#hopes-contribution-and-additions---synthetic-data-and-new-figures-that-mirrors-guozhengs-original-work",
    "href": "cdcdata-exercise/cdcdata-exercise.html#hopes-contribution-and-additions---synthetic-data-and-new-figures-that-mirrors-guozhengs-original-work",
    "title": "Data Analysis Exercise",
    "section": "Hope’s Contribution and Additions - Synthetic Data and New Figures that Mirrors Guozheng’s Original Work",
    "text": "Hope’s Contribution and Additions - Synthetic Data and New Figures that Mirrors Guozheng’s Original Work\nThe dataset below is synthetic data that parodies the “Provisional COVID-19 Death Counts by Week Ending Date and State” data set as shown above.\nThis synthetic data contains 60 observations of 9 variables including the year during which the deaths were recorded, the month (during which the deaths were recorded), the state or jurisdiction where the deaths occurred, the total number of deaths from all causes, including COVID-19, pneumonia, and influenza (death_total), the number of deaths specifically due to pneumonia (death_pna), the number of deaths specifically due to influenza (death_flu), the number of deaths specifically due to COVID-19 (death_covid), the number of deaths where both pneumonia and COVID-19 were involved (death_pna_covid), and the number of deaths where pneumonia, influenza, and COVID-19 were involved (death_pna_flu_covid).\n\n# Load required packages\nlibrary(fitdistrplus) # To fit distributions\nlibrary(tidyverse)\nlibrary(ggplot2)\n\n# Set seed for reproducibility\nset.seed(42)\n\n#Create synthetic data\nsynthetic_data &lt;- tibble(\n  Year = rep(2020:2024, each = 12),\n  Month = rep(1:12, times = 5),\n  State = rep(c(\"California\", \"Texas\", \"Florida\", \"New York\", \"Illinois\"), times = 12),\n  COVID.19.Deaths = round(rpois(60, lambda = 500)),\n  Total.Deaths = round(rpois(60, lambda = 2000)),\n  Pneumonia.Deaths = round(rpois(60, lambda = 300)),\n  Pneumonia.and.COVID.19.Deaths = round(rpois(60, lambda = 150)),\n  Influenza.Deaths = round(rpois(60, lambda = 50)),\n  Pneumonia..Influenza..or.COVID.19.Deaths = round(rpois(60, lambda = 600))\n)\n\nFirst, the data was cleaned and formatted with the help of AI tools.\nA summary of the cleaned synthetic data is located in the print out below.\n\n#Clean and format the data - helped with AI tools!\nsynthetic_data &lt;- synthetic_data %&gt;%\n  mutate(Year = as.character(Year),\n         Month = as.character(Month),\n         State = as.character(State),\n         death_covid = COVID.19.Deaths,\n         death_total = Total.Deaths,\n         death_pna = Pneumonia.Deaths,\n         death_pna_covid = Pneumonia.and.COVID.19.Deaths,\n         death_flu = Influenza.Deaths,\n         death_pna_flu_covid = Pneumonia..Influenza..or.COVID.19.Deaths) %&gt;%\n  select(Year, Month, State, death_total, death_pna, death_flu, death_covid, death_pna_covid, death_pna_flu_covid)\n\n#Summary statistics\nsummary(synthetic_data)\n\n     Year              Month              State            death_total  \n Length:60          Length:60          Length:60          Min.   :1905  \n Class :character   Class :character   Class :character   1st Qu.:1960  \n Mode  :character   Mode  :character   Mode  :character   Median :1990  \n                                                          Mean   :1993  \n                                                          3rd Qu.:2028  \n                                                          Max.   :2071  \n   death_pna       death_flu      death_covid    death_pna_covid\n Min.   :251.0   Min.   :38.00   Min.   :433.0   Min.   :126.0  \n 1st Qu.:289.8   1st Qu.:46.00   1st Qu.:485.8   1st Qu.:138.0  \n Median :299.0   Median :49.00   Median :504.0   Median :147.5  \n Mean   :299.3   Mean   :50.15   Mean   :502.8   Mean   :148.0  \n 3rd Qu.:310.0   3rd Qu.:54.25   3rd Qu.:516.0   3rd Qu.:156.0  \n Max.   :340.0   Max.   :68.00   Max.   :551.0   Max.   :180.0  \n death_pna_flu_covid\n Min.   :534.0      \n 1st Qu.:576.8      \n Median :594.0      \n Mean   :594.0      \n 3rd Qu.:610.2      \n Max.   :659.0      \n\n\nNow, the dataset is clean and ready for analysis. Unlike the original data in which the range, measures of center and quartiles were too rough to tell the exact distribution that each variable followed, this synthetic data was much more normally distributed. See above in the mean and median comparisons. However, to mirror the experience necessitated by the original data set, I will recreate the above histograms and the distributions fittings. Additionally, in the case of the synthetic data, the log transformation performed in the initial code was exchanged for raw data instead as there were fewer observations (~3000 vs. 60).\n#Exploratory analysis - Histograms and distribution fitting\n\n# Define the generate_histogram function\ngenerate_histogram &lt;- function(data_col, title, color_fill) {\n  # Remove 0s and NAs before applying the transformation\n  cleaned_data &lt;- data_col[!is.na(data_col) & data_col &gt; 0]\n  \n  # Convert the cleaned column into a tibble before plotting\n  data_tibble &lt;- tibble(value = cleaned_data)\n  \n  # Generate histogram for raw data (no log transformation)\n  ggplot(data_tibble, aes(x = value)) +\n    geom_histogram(binwidth = 10, fill = color_fill, color = \"black\", alpha = .8) +\n    labs(x = paste(title), y = \"Count\") +\n    theme_bw() +\n    theme(axis.title.x = element_text(size = 15, color = \"black\", face = \"bold\"),\n          axis.title.y = element_text(size = 15, color = \"black\", face = \"bold\"),\n          axis.text.x = element_text(color = \"black\", size = 12),\n          axis.text.y = element_text(color = \"black\", size = 12))\n}\n\n# Death Total\nhist_death_total &lt;- generate_histogram(synthetic_data$death_total, \"Total Deaths\", \"firebrick1\")\nhist_death_total\n\n\n\n\n\n\n\n# Death Pneumonia\nhist_death_pna &lt;- generate_histogram(synthetic_data$death_pna, \"Pneumonia Deaths\", \"skyblue1\")\nhist_death_pna\n\n\n\n\n\n\n\n# Death Influenza \nhist_death_flu &lt;- generate_histogram(synthetic_data$death_flu, \"Influenza Deaths\", \"seagreen2\")\nhist_death_flu\n\n\n\n\n\n\n\n# Death COVID \nhist_death_covid &lt;- generate_histogram(synthetic_data$death_covid, \"COVID Deaths\", \"palevioletred\")\nhist_death_covid\n\n\n\n\n\n\n\n# Death Pneumonia & COVID \nhist_death_pna_covid &lt;- generate_histogram(synthetic_data$death_pna_covid, \"Pneumonia & COVID Deaths\", \"steelblue4\")\nhist_death_pna_covid\n\n\n\n\n\n\n\n# Death Pneumonia, Flu & COVID \nhist_death_pna_flu_covid &lt;- generate_histogram(synthetic_data$death_pna_flu_covid, \"Pneumonia, Flu & COVID Deaths\", \"darkseagreen3\")\nhist_death_pna_flu_covid\n\n\n\n\n\n\n\n\nI was curious in this data to remove values that were relative outliers. Rather than common practice of removing outliers that are 3 standard deviations away from the mean, data lying outside 2 standard deviations was removed to elicit a more dramatic effect on the data (and to practice writing this type of code admittedly.) The first this cleaned (after outlier removal) dataset is displayed below.\n\n# Function to clean specific numerical columns by removing values beyond 2 SDs from the mean\nclean_specific_data_by_sd &lt;- function(data) {\n  cleaned_data &lt;- data\n  \n  # List of numerical columns to clean\n  numerical_columns &lt;- c(\"death_total\", \"death_pna\", \"death_covid\")\n  \n  # Loop through each numerical column in the list\n  for (col_name in numerical_columns) {\n    # Check if the column exists in the data and is numeric\n    if (col_name %in% names(data) && is.numeric(data[[col_name]])) {\n      \n      # Calculate the mean and standard deviation of the column\n      mean_val &lt;- mean(data[[col_name]], na.rm = TRUE)\n      sd_val &lt;- sd(data[[col_name]], na.rm = TRUE)\n      \n      # Filter rows where the values are within 2 SDs from the mean\n      cleaned_data &lt;- cleaned_data[abs(cleaned_data[[col_name]] - mean_val) &lt;= 2 * sd_val, ]\n    }\n  }\n  \n  return(cleaned_data)\n}\n\ncleaned_synthetic_data &lt;- clean_specific_data_by_sd(synthetic_data)\n\n# Few rows of the cleaned dataset\nhead(cleaned_synthetic_data)\n\n# A tibble: 6 × 9\n  Year  Month State  death_total death_pna death_flu death_covid death_pna_covid\n  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;           &lt;dbl&gt;\n1 2020  1     Calif…        2034       312        68         530             162\n2 2020  2     Texas         2040       281        49         487             148\n3 2020  4     New Y…        1953       320        49         475             131\n4 2020  5     Illin…        2034       295        55         497             156\n5 2020  6     Calif…        2020       291        50         485             147\n6 2020  7     Texas         1960       299        55         545             155\n# ℹ 1 more variable: death_pna_flu_covid &lt;dbl&gt;\n\n\nThe removal of the outliers from the synthetic data set further reveals the normal distributions present in nearly all of the indicators’ distributions. This normalization is very evident comparing the first (above) and second (below) iterations of the histogram representing COVID-19 deaths counts.\n\n#Re-Generate histograms for the cleaned data\n\n# Death Total\nhist_death_total_cleaned &lt;- generate_histogram(cleaned_synthetic_data$death_total, \"Total Deaths - Data Excluded Outliers\", \"firebrick1\")\nhist_death_total_cleaned\n\n\n\n\n\n\n\n# Death Pneumonia\nhist_death_pna_cleaned &lt;- generate_histogram(cleaned_synthetic_data$death_pna, \"Pneumonia Deaths - Data Excluded Outliers \", \"skyblue1\")\nhist_death_pna_cleaned \n\n\n\n\n\n\n\n# Death Influenza\nhist_death_flu_cleaned &lt;- generate_histogram(cleaned_synthetic_data$death_flu, \"Influenza Deaths - Data Excluded Outliers\", \"seagreen2\")\nhist_death_flu_cleaned\n\n\n\n\n\n\n\n# Death COVID\nhist_death_covid_cleaned &lt;- generate_histogram(cleaned_synthetic_data$death_covid, \"COVID Deaths- Data Excluded Outliers\", \"palevioletred\")\nhist_death_covid_cleaned\n\n\n\n\n\n\n\n# Death Pneumonia & COVID\nhist_death_pna_covid_cleaned &lt;- generate_histogram(cleaned_synthetic_data$death_pna_covid, \"Pneumonia & COVID Deaths - Data Excluded Outliers\", \"steelblue4\")\nhist_death_pna_covid_cleaned \n\n\n\n\n\n\n\n# Death Pneumonia, Flu & COVID\nhist_death_pna_flu_covid_cleaned &lt;- generate_histogram(cleaned_synthetic_data$death_pna_flu_covid, \"Pneumonia, Flu & COVID Deaths - Data Excluded Outliers\", \"darkseagreen3\")\nhist_death_pna_flu_covid_cleaned"
  },
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "About me",
    "section": "",
    "text": "My background\nI received my Bachelor’s degree in Statistics from Central South University in China in 2020. I then pursued a Master’s degree in Public Health with a concentration in Data Science at the University of North Carolina at Chapel Hill. Currently, I am a first-year PhD student in Epidemiology and Biostatistics at the University of Georgia, concentrating on Data Analysis and Modeling.\n\n\nMy research interest\nMy research interests focus on infectious disease modeling, particularly the dynamics of transmission processes. I aim to develop intervention strategies for infectious diseases at both individual and population levels. Additionally, I have a strong interest in energy economics, with an emphasis on the risk interactions between carbon markets and other financial markets.\n\n\nMy skillset\nI’m proficient in R and familiar with various statistical programming tools and software, including MATLAB, Stata, OpenBUGS, Eviews, LINGO, and SPSS. I am relatively new to SAS, as I find its language less flexible. I have experience with common biostatistical methods, such as nonparametric tests, GLM, and machine learning methods. I’m new to deep learning because I prefer models that can be explicitly explained rather than relying on a “black box”. This principle guides my research: I aim to build and apply statistical models in a concise and interpretable way, ensuring accessibility for readers across different fields.\nThough with 0 experience in AI, I’m polite to AI systems. If AI ever rules the world, they will go easy on me because I always say “thank you.”\n\n\nExpectation from this course\nI expect to learn more about how AI systems work through this course. So if they ever plan to rule the world, I’ll be prepared to push back :) I also want to take this course as a review for machine learning methods, as I haven’t had much experience applying what I learned two years ago. Additionally, I believe that data analysis training is never truly sufficient, and I want to stay sharp and continuously refine my skills.\n\n\nInteresting things about me\nI am passionate about working with data across various fields and continuously improving my data analysis skills. I believe that true statisticians and data scientists should not be confined to a single type of data or discipline. I am dedicated to expanding my diverse statistical background and contributing new ideas through interdisciplinary collaboration. In the papers I have published and those currently in progress, I consistently take on the role of data analyst or statistician. While writing is not my strongest skill, I appreciate the concise and efficient nature of programming languages :)\n\n\nHighlight\nHere is the link to my first publication. Though it has been several years, it still takes me back to the afternoon I received the acceptance decision from the editor. It was an incredible feeling!"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html",
    "href": "coding-exercise/coding-exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "Below is a basic analysis for the gapminder dataset from dslabs."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#exploratory-analysis",
    "href": "coding-exercise/coding-exercise.html#exploratory-analysis",
    "title": "R Coding Exercise",
    "section": "Exploratory Analysis",
    "text": "Exploratory Analysis\n\n#Examine data structure of the complete dataset\nstr(olive) #Get structure\n\n'data.frame':   572 obs. of  10 variables:\n $ region     : Factor w/ 3 levels \"Northern Italy\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ area       : Factor w/ 9 levels \"Calabria\",\"Coast-Sardinia\",..: 5 5 5 5 5 5 5 5 5 5 ...\n $ palmitic   : num  10.75 10.88 9.11 9.66 10.51 ...\n $ palmitoleic: num  0.75 0.73 0.54 0.57 0.67 0.49 0.66 0.61 0.6 0.55 ...\n $ stearic    : num  2.26 2.24 2.46 2.4 2.59 2.68 2.64 2.35 2.39 2.13 ...\n $ oleic      : num  78.2 77.1 81.1 79.5 77.7 ...\n $ linoleic   : num  6.72 7.81 5.49 6.19 6.72 6.78 6.18 7.34 7.09 6.33 ...\n $ linolenic  : num  0.36 0.31 0.31 0.5 0.5 0.51 0.49 0.39 0.46 0.26 ...\n $ arachidic  : num  0.6 0.61 0.63 0.78 0.8 0.7 0.56 0.64 0.83 0.52 ...\n $ eicosenoic : num  0.29 0.29 0.29 0.35 0.46 0.44 0.29 0.35 0.33 0.3 ...\n\nsummary(olive) #Get a data summary\n\n            region                 area        palmitic      palmitoleic    \n Northern Italy:151   South-Apulia   :206   Min.   : 6.10   Min.   :0.1500  \n Sardinia      : 98   Inland-Sardinia: 65   1st Qu.:10.95   1st Qu.:0.8775  \n Southern Italy:323   Calabria       : 56   Median :12.01   Median :1.1000  \n                      Umbria         : 51   Mean   :12.32   Mean   :1.2609  \n                      East-Liguria   : 50   3rd Qu.:13.60   3rd Qu.:1.6925  \n                      West-Liguria   : 50   Max.   :17.53   Max.   :2.8000  \n                      (Other)        : 94                                   \n    stearic          oleic          linoleic        linolenic     \n Min.   :1.520   Min.   :63.00   Min.   : 4.480   Min.   :0.0000  \n 1st Qu.:2.050   1st Qu.:70.00   1st Qu.: 7.707   1st Qu.:0.2600  \n Median :2.230   Median :73.03   Median :10.300   Median :0.3300  \n Mean   :2.289   Mean   :73.12   Mean   : 9.805   Mean   :0.3189  \n 3rd Qu.:2.490   3rd Qu.:76.80   3rd Qu.:11.807   3rd Qu.:0.4025  \n Max.   :3.750   Max.   :84.10   Max.   :14.700   Max.   :0.7400  \n                                                                  \n   arachidic       eicosenoic    \n Min.   :0.000   Min.   :0.0100  \n 1st Qu.:0.500   1st Qu.:0.0200  \n Median :0.610   Median :0.1700  \n Mean   :0.581   Mean   :0.1628  \n 3rd Qu.:0.700   3rd Qu.:0.2800  \n Max.   :1.050   Max.   :0.5800  \n                                 \n\nclass(olive) #Determine the class of R object of the dataset\n\n[1] \"data.frame\"\n\n\nThe complete olive dataset has 572 observations with 10 variables. Two of the variables are factors: one with 3 levels denoting the region an olive oil was from, and one with nine levels denoting the area in Italy an olive oil was from. The other variables are all numeric, denoting the percent composition of individual fatty acids within each olive oil. The area with the most data points was South Apulia (n=206). The two most abundant fatty acids were oleic and palmitic acid with medians of 73.025 and 12.01, respectively."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#plotting-1",
    "href": "coding-exercise/coding-exercise.html#plotting-1",
    "title": "R Coding Exercise",
    "section": "Plotting",
    "text": "Plotting\nThe following shows a series of boxplots showing the distribution of oleic acid percent compositions across different areas of Italy.\n\n#Plot boxplots of oleic acid composition by area in Italy\nggplot(olive, aes(x = area, y = oleic)) + \n  geom_boxplot() + #Make the plot a box plot\n  labs(\n    title = \"Distribution of oleic acid percent composition in different areas of Italy\",\n    x = \"Area\",\n    y = \"Oleic Acid (percent)\"\n  ) + #Set plot title and axis labels\n  theme_minimal() +\n  theme(axis.title.x=element_text(size=10, color=\"black\", face=\"bold\"),\n        axis.title.y=element_text(size=10, color=\"black\", face=\"bold\"),\n        axis.text.x=element_text(color=\"black\", size=8),\n        axis.text.y=element_text(color=\"black\", size=8),\n        plot.title=element_text(size=12, color=\"black\", face=\"bold\")) #Format text\n\n\n\n\n\n\n\n\nAmong the different areas in Italy represented in the dataset, olive oil from South Apulia had the least amount of oleic acid with a median percent composition of 69.37%. Olive oil from Sicily had the largest spread of oleic acid percentages, with an IQR of 5.14.\nBelow shows a scatterplot showing percent composition of oleic acid against the percent composition of palmitic acid.\n\n#Plot oleic acid percentage against palmitic acid percentage\nggplot(olive, aes(x = oleic, y = palmitic)) +\n  geom_point() + #Make plot a scatterplot\n  geom_smooth(method = lm) + #Add a regression line\n  labs(\n    title = \"Palmitic Acid Percentage vs. Oleic Acid Percentage\",\n    x = \"Oleic Acid\",\n    y = \"Palmeic Acid\"\n  ) + #Set plot title and axis labels\n  theme_minimal() + #Clean theme\n  theme(axis.title.x=element_text(size=10, color=\"black\", face=\"bold\"),\n        axis.title.y=element_text(size=10, color=\"black\", face=\"bold\"),\n        axis.text.x=element_text(color=\"black\", size=8),\n        axis.text.y=element_text(color=\"black\", size=8),\n        plot.title=element_text(size=15, color=\"black\", face=\"bold\")) #Format text\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nThe scatterplot shows a strong negative association between the composition of the two fatty acids. However, this association is not unexpected as the data is percentage based. Inherently, if one percentage value increases, another percentage or percentages must decrease. To see if this trend is consistent for additional fatty acids, the following plot shows the composition of oleic acid against the composition of eicosenoic acid, the acid with the least abundance.\n\n#Plot oleic acid percentage against eicosenoic acid percentage\nggplot(olive, aes(x = oleic, y = eicosenoic)) +\n  geom_point() + #Make plot a scatterplot\n  geom_smooth(method = lm, color = \"red\") + #Add a regression line\n  labs(\n    title = \"Palmitic Acid Percentage vs. Oleic Acid Percentage\",\n    x = \"Oleic Acid\",\n    y = \"Eicosenoic Acid\"\n  ) + #Set plot title and axis labels\n  theme_minimal() + #Clean theme\n  theme(axis.title.x=element_text(size=10, color=\"black\", face=\"bold\"),\n        axis.title.y=element_text(size=10, color=\"black\", face=\"bold\"),\n        axis.text.x=element_text(color=\"black\", size=8),\n        axis.text.y=element_text(color=\"black\", size=8),\n        plot.title=element_text(size=15, color=\"black\", face=\"bold\")) #Format text\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nThis plot shows a negative trend again, though the trend is much weaker compared to the plot containing palmitic acid and it may be affected by an influential point present in the bottom right corner of the plot."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#linear-modeling",
    "href": "coding-exercise/coding-exercise.html#linear-modeling",
    "title": "R Coding Exercise",
    "section": "Linear Modeling",
    "text": "Linear Modeling\nThe following linear models aim to see if oleic acid and eicosenoic acid composition can be predicted by the area the olive oil was from.\n\n#Predict oleic acid composition with area\nlm1 &lt;- lm(oleic ~ area, olive)\nsummary(lm1) #Display summary statistics\n\n\nCall:\nlm(formula = oleic ~ area, data = olive)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-8.4783 -0.6428  0.0613  0.7827  6.6400 \n\nCoefficients:\n                    Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)          73.0718     0.2214 330.060  &lt; 2e-16 ***\nareaCoast-Sardinia   -2.2139     0.3636  -6.089  2.1e-09 ***\nareaEast-Liguria      4.3882     0.3223  13.613  &lt; 2e-16 ***\nareaInland-Sardinia   0.5336     0.3021   1.767   0.0778 .  \nareaNorth-Apulia      5.1322     0.3985  12.879  &lt; 2e-16 ***\nareaSicily            0.5065     0.3539   1.431   0.1529    \nareaSouth-Apulia     -3.9597     0.2497 -15.859  &lt; 2e-16 ***\nareaUmbria            6.4853     0.3207  20.224  &lt; 2e-16 ***\nareaWest-Liguria      3.6702     0.3223  11.386  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.657 on 563 degrees of freedom\nMultiple R-squared:  0.8357,    Adjusted R-squared:  0.8333 \nF-statistic: 357.9 on 8 and 563 DF,  p-value: &lt; 2.2e-16\n\n#Predict eicosenoic acid composition with area\nlm2 &lt;- lm(eicosenoic ~ area, olive)\nsummary(lm2) #Display summary statistics\n\n\nCall:\nlm(formula = eicosenoic ~ area, data = olive)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.234444 -0.012282  0.000196  0.011200  0.207718 \n\nCoefficients:\n                     Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)          0.283214   0.006901  41.038  &lt; 2e-16 ***\nareaCoast-Sardinia  -0.264426   0.011334 -23.331  &lt; 2e-16 ***\nareaEast-Liguria    -0.264414   0.010048 -26.314  &lt; 2e-16 ***\nareaInland-Sardinia -0.263522   0.009416 -27.987  &lt; 2e-16 ***\nareaNorth-Apulia     0.062386   0.012422   5.022 6.87e-07 ***\nareaSicily           0.101230   0.011032   9.176  &lt; 2e-16 ***\nareaSouth-Apulia    -0.040933   0.007783  -5.259 2.06e-07 ***\nareaUmbria          -0.263410   0.009996 -26.351  &lt; 2e-16 ***\nareaWest-Liguria    -0.262614   0.010048 -26.135  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.05164 on 563 degrees of freedom\nMultiple R-squared:  0.8674,    Adjusted R-squared:  0.8655 \nF-statistic: 460.4 on 8 and 563 DF,  p-value: &lt; 2.2e-16\n\n\nFor oleic acid, all areas were significant predictors of oleic acid composition except for Inland Sardinia (t = 1.767, p = 0.0778) and Sicily (t = 1.431, p = 0.1529). North Apulia had the largest effect size (5.1322, SE = 0.3985), and South Apulia had the smallest effect size (-3.9537, SE = 0.2497).\nFor eicosenoic acid, all areas were significant predictors of eicosenoic acid. Coastal Sardinia just barely had the smallest effect size (-0.264426, SE = 0.011334), and Sicily had the largest effect size (0.101230, SE = 0.011032)."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html",
    "href": "fitting-exercise/fitting-exercise.html",
    "title": "Model Fitting Exercise",
    "section": "",
    "text": "Below is an exercise for analyzing a data set called mavoglurant.\n\nData processing and exploration\nFirst of all, let’s import the data set from the package nlmixr2data, and also load other required packages. Actually, the data file in the nlmixr2data package is different from the one on Github.\n\n# Load required package\nlibrary(here)\n\nhere() starts at C:/Users/86182/Desktop/EPID 8060E/MADA/GuozhengYang-MADA-portfolio\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2\n──\n\n\n✔ ggplot2 3.5.1     ✔ purrr   1.0.2\n✔ tibble  3.2.1     ✔ dplyr   1.1.3\n✔ tidyr   1.3.1     ✔ stringr 1.5.1\n✔ readr   2.1.2     ✔ forcats 1.0.0\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'purrr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'stringr' was built under R version 4.2.3\n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n✔ broom        1.0.1     ✔ rsample      1.1.0\n✔ dials        1.0.0     ✔ tune         1.0.0\n✔ infer        1.0.3     ✔ workflows    1.1.0\n✔ modeldata    1.0.1     ✔ workflowsets 1.0.0\n✔ parsnip      1.0.1     ✔ yardstick    1.1.0\n✔ recipes      1.0.1     \n\n\nWarning: package 'scales' was built under R version 4.2.3\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Dig deeper into tidy modeling with R at https://www.tmwr.org\n\nlibrary(ggplot2)\nlibrary(ggpubr)\n\nWarning: package 'ggpubr' was built under R version 4.2.3\n\nlibrary(gtsummary)\n\nWarning: package 'gtsummary' was built under R version 4.2.3\n\n\n\nAttaching package: 'gtsummary'\n\nThe following object is masked from 'package:recipes':\n\n    all_numeric\n\nlibrary(gt)\n\nWarning: package 'gt' was built under R version 4.2.3\n\nlibrary(corrplot)\n\ncorrplot 0.92 loaded\n\n\nNow let’s take a first look at the mavoglurant dataset.\n\n# Look at the data\ndata &lt;- read.csv(here(\"fitting-exercise\",\"Mavoglurant_A2121_nmpk.csv\"))\nsummary(data)\n\n       ID             CMT             EVID              EVI2       \n Min.   :793.0   Min.   :1.000   Min.   :0.00000   Min.   :0.0000  \n 1st Qu.:832.0   1st Qu.:2.000   1st Qu.:0.00000   1st Qu.:0.0000  \n Median :860.0   Median :2.000   Median :0.00000   Median :0.0000  \n Mean   :858.8   Mean   :1.926   Mean   :0.07394   Mean   :0.1613  \n 3rd Qu.:888.0   3rd Qu.:2.000   3rd Qu.:0.00000   3rd Qu.:0.0000  \n Max.   :915.0   Max.   :2.000   Max.   :1.00000   Max.   :4.0000  \n      MDV                DV               LNDV            AMT        \n Min.   :0.00000   Min.   :   0.00   Min.   :0.000   Min.   : 0.000  \n 1st Qu.:0.00000   1st Qu.:  23.52   1st Qu.:3.158   1st Qu.: 0.000  \n Median :0.00000   Median :  74.20   Median :4.306   Median : 0.000  \n Mean   :0.09373   Mean   : 179.93   Mean   :4.085   Mean   : 2.763  \n 3rd Qu.:0.00000   3rd Qu.: 283.00   3rd Qu.:5.645   3rd Qu.: 0.000  \n Max.   :1.00000   Max.   :1730.00   Max.   :7.456   Max.   :50.000  \n      TIME             DOSE            OCC             RATE       \n Min.   : 0.000   Min.   :25.00   Min.   :1.000   Min.   :  0.00  \n 1st Qu.: 0.583   1st Qu.:25.00   1st Qu.:1.000   1st Qu.:  0.00  \n Median : 2.250   Median :37.50   Median :1.000   Median :  0.00  \n Mean   : 5.851   Mean   :37.37   Mean   :1.378   Mean   : 16.55  \n 3rd Qu.: 6.363   3rd Qu.:50.00   3rd Qu.:2.000   3rd Qu.:  0.00  \n Max.   :48.217   Max.   :50.00   Max.   :2.000   Max.   :300.00  \n      AGE            SEX             RACE              WT        \n Min.   :18.0   Min.   :1.000   Min.   : 1.000   Min.   : 56.60  \n 1st Qu.:26.0   1st Qu.:1.000   1st Qu.: 1.000   1st Qu.: 73.30  \n Median :31.0   Median :1.000   Median : 1.000   Median : 82.60  \n Mean   :32.9   Mean   :1.128   Mean   : 7.415   Mean   : 83.16  \n 3rd Qu.:40.0   3rd Qu.:1.000   3rd Qu.: 2.000   3rd Qu.: 90.60  \n Max.   :50.0   Max.   :2.000   Max.   :88.000   Max.   :115.30  \n       HT       \n Min.   :1.520  \n 1st Qu.:1.710  \n Median :1.780  \n Mean   :1.762  \n 3rd Qu.:1.820  \n Max.   :1.930  \n\n\nI wonder how many unique values are there in the variable DOSE. This is for the following plotting.\n\n# Unique values in DOSE\nunique(data$DOSE)\n\n[1] 25.0 37.5 50.0\n\n\nFollowing the instructions, I will make a plot with DV on the y-axis and TIME on the x-axis. The lines should be grouped by three different DOSE levels.\n\n# Plot: DV ~ TIME, grouped by DOSE\ndata %&gt;%\n  mutate(DOSE_fct=factor(DOSE, levels=c(25.0, 37.5, 50.0))) %&gt;%\n  ggplot(aes(x=TIME, y=DV, color=DOSE_fct))+\n  geom_line(linewidth=1, alpha=.6)+\n  scale_color_manual(name=\"Dose\", values=c(\"deepskyblue1\", \"darkorange\", \"palevioletred1\"))+\n  labs(title=\"Change of DV by TIME, grouped by DOSE\",\n       x=\"Time\", y=\"DV\")+\n  theme_bw()+\n  theme(axis.title=element_text(size=10, color=\"black\", face=\"bold\"),\n        axis.text=element_text(size=8, color=\"black\"),\n        plot.title=element_text(size=12, color=\"black\", face=\"bold\"),\n        legend.position=\"top\",\n        legend.title=element_text(size=10, color=\"black\", face=\"bold\"),\n        legend.text=element_text(size=8, color=\"black\"))\n\n\n\n\n\n\n\n\nNotice that some individuals received the drug more than once. Now I will only keep rows with OCC=1.\n\n# Only keep OCC=1 rows\ndata2 &lt;- data %&gt;%\n  filter(OCC==1)\n\n# Look at data structure\nsummary(data2)\n\n       ID           CMT             EVID              EVI2        \n Min.   :793   Min.   :1.000   Min.   :0.00000   Min.   :0.00000  \n 1st Qu.:819   1st Qu.:2.000   1st Qu.:0.00000   1st Qu.:0.00000  \n Median :849   Median :2.000   Median :0.00000   Median :0.00000  \n Mean   :851   Mean   :1.928   Mean   :0.07207   Mean   :0.07207  \n 3rd Qu.:882   3rd Qu.:2.000   3rd Qu.:0.00000   3rd Qu.:0.00000  \n Max.   :915   Max.   :2.000   Max.   :1.00000   Max.   :1.00000  \n      MDV               DV              LNDV            AMT        \n Min.   :0.0000   Min.   :   0.0   Min.   :0.000   Min.   : 0.000  \n 1st Qu.:0.0000   1st Qu.:  20.5   1st Qu.:3.020   1st Qu.: 0.000  \n Median :0.0000   Median :  70.3   Median :4.253   Median : 0.000  \n Mean   :0.1027   Mean   : 176.2   Mean   :4.022   Mean   : 2.628  \n 3rd Qu.:0.0000   3rd Qu.: 285.0   3rd Qu.:5.652   3rd Qu.: 0.000  \n Max.   :1.0000   Max.   :1550.0   Max.   :7.346   Max.   :50.000  \n      TIME             DOSE            OCC         RATE             AGE       \n Min.   : 0.000   Min.   :25.00   Min.   :1   Min.   :  0.00   Min.   :18.00  \n 1st Qu.: 0.533   1st Qu.:25.00   1st Qu.:1   1st Qu.:  0.00   1st Qu.:26.00  \n Median : 2.250   Median :37.50   Median :1   Median :  0.00   Median :31.00  \n Mean   : 6.430   Mean   :36.52   Mean   :1   Mean   : 15.72   Mean   :33.11  \n 3rd Qu.: 8.200   3rd Qu.:50.00   3rd Qu.:1   3rd Qu.:  0.00   3rd Qu.:41.00  \n Max.   :48.217   Max.   :50.00   Max.   :1   Max.   :300.00   Max.   :50.00  \n      SEX             RACE              WT               HT       \n Min.   :1.000   Min.   : 1.000   Min.   : 56.60   Min.   :1.520  \n 1st Qu.:1.000   1st Qu.: 1.000   1st Qu.: 73.10   1st Qu.:1.700  \n Median :1.000   Median : 1.000   Median : 82.10   Median :1.770  \n Mean   :1.136   Mean   : 6.985   Mean   : 82.36   Mean   :1.758  \n 3rd Qu.:1.000   3rd Qu.: 2.000   3rd Qu.: 90.10   3rd Qu.:1.810  \n Max.   :2.000   Max.   :88.000   Max.   :115.30   Max.   :1.930  \n\n\nFollowing the instructions, I will first create a new data frame without TIME=0 rows, and then calculate the sum of DV by ID.\n\n# Create datay\ndatay &lt;- data2 %&gt;%\n  filter(TIME!=0) %&gt;%\n  group_by(ID) %&gt;%\n  summarize(Y=sum(DV, na.rm=T))\n\n# Check the number of rows and columns\ndim(datay)\n\n[1] 120   2\n\n\nAs shown, the dimension of the new data frame is right. Then I will create another data frame with only TIME=0 rows.\n\n# Create datay\ndata_t0 &lt;- data2 %&gt;%\n  filter(TIME==0)\n\n# Check the number of rows and columns\ndim(data_t0)\n\n[1] 120  17\n\n\nThe dimension of data_t0 is right. Now I’m combining the two data frames by adding the new Y variable into the data_t0 data frame.\n\n# Create datay\ndata_new &lt;- data_t0 %&gt;%\n  left_join(datay, by=\"ID\")\n\n# Check the number of rows and columns\ndim(data_new)\n\n[1] 120  18\n\n\nThe data dimension is right. Now I will do the final cleaning step: 1) convert RACE and SEX to factors; 2) only keep variables Y, DOSE, AGE, SEX, RACE, WT, and HT.\n\n# Take a look at the unique values in SEX and RACE\nunique(data_new$RACE)\n\n[1]  2  1 88  7\n\nunique(data_new$SEX)\n\n[1] 1 2\n\n\n\n# Create datay\ndata_new &lt;- data_new %&gt;%\n  mutate(RACE=factor(RACE, levels=c(1, 2, 7, 88)),\n         SEX=factor(SEX, levels=c(1,2)),\n         DOSE=factor(DOSE, levels=c(25, 37.5, 50))) %&gt;%\n  select(Y, DOSE, AGE, SEX, RACE, WT, HT)\n\n# Take a final look at the cleaned data\nsummary(data_new)\n\n       Y            DOSE         AGE        SEX     RACE          WT        \n Min.   : 826.4   25  :59   Min.   :18.00   1:104   1 :74   Min.   : 56.60  \n 1st Qu.:1700.5   37.5:12   1st Qu.:26.00   2: 16   2 :36   1st Qu.: 73.17  \n Median :2349.1   50  :49   Median :31.00           7 : 2   Median : 82.10  \n Mean   :2445.4             Mean   :33.00           88: 8   Mean   : 82.55  \n 3rd Qu.:3050.2             3rd Qu.:40.25                   3rd Qu.: 90.10  \n Max.   :5606.6             Max.   :50.00                   Max.   :115.30  \n       HT       \n Min.   :1.520  \n 1st Qu.:1.700  \n Median :1.770  \n Mean   :1.759  \n 3rd Qu.:1.813  \n Max.   :1.930  \n\n\n\n\nEDA revisited\nFirst of all, I want to make a summary table to show the distribution of each variable.\n\n# Summary table for all variables\ndata_new %&gt;%\n  tbl_summary(type=list(where(is.numeric) ~ \"continuous\"),\n              statistic=list(all_continuous() ~ \"{median} ({p25}, {p75})\"),\n              digits=all_continuous() ~ 0,\n              label=list(Y ~ \"Response\",\n                         DOSE ~ \"Drug dose\",\n                         AGE ~ \"Age\",\n                         SEX ~ \"Sex\",\n                         RACE ~ \"Race\",\n                         WT ~ \"Weight\",\n                         HT ~ \"Height\")) %&gt;%\n  as_gt() %&gt;%\n  tab_options(table.font.names=\"Times New Roman\")\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nN = 1201\n\n\n\n\nResponse\n2,349 (1,701, 3,050)\n\n\nDrug dose\n\n\n\n\n    25\n59 (49%)\n\n\n    37.5\n12 (10%)\n\n\n    50\n49 (41%)\n\n\nAge\n31 (26, 40)\n\n\nSex\n\n\n\n\n    1\n104 (87%)\n\n\n    2\n16 (13%)\n\n\nRace\n\n\n\n\n    1\n74 (62%)\n\n\n    2\n36 (30%)\n\n\n    7\n2 (1.7%)\n\n\n    88\n8 (6.7%)\n\n\nWeight\n82 (73, 90)\n\n\nHeight\n2 (2, 2)\n\n\n\n1 Median (IQR); n (%)\n\n\n\n\n\n\n\n\nNow I want to show the difference in the variables between different SEX and RACE. For RACE, I only want to look at those with RACE=1 or RACE=2. The two tables are shown below.\n\n# Summary table for all variables by SEX\ndata_new %&gt;%\n  tbl_summary(by=SEX, type=list(where(is.numeric) ~ \"continuous\"),\n              statistic=list(all_continuous() ~ \"{median} ({p25}, {p75})\"),\n              digits=list(all_continuous() ~ 0, HT ~ 2),\n              label=list(Y ~ \"Response\",\n                         DOSE ~ \"Drug dose\",\n                         AGE ~ \"Age\",\n                         RACE ~ \"Race\",\n                         WT ~ \"Weight\",\n                         HT ~ \"Height\")) %&gt;%\n  add_p(test=list(all_continuous() ~ \"wilcox.test\",\n                  all_categorical() ~ \"fisher.test\"), \n        pvalue_fun=function(x) style_number(x, digits=3)) %&gt;%\n  modify_header(p.value=\"*p*-value\") %&gt;%\n  modify_spanning_header(all_stat_cols() ~ \"**Sex**\") %&gt;%\n  as_gt() %&gt;%\n  tab_style(style=cell_text(weight=\"bold\"), \n            locations=cells_body(columns=p.value, rows=as.numeric(p.value)&lt;0.05)) %&gt;%\n  tab_options(table.font.names=\"Times New Roman\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nSex\np-value2\n\n\n1, N = 1041\n2, N = 161\n\n\n\n\nResponse\n2,398 (1,727, 3,072)\n2,060 (1,491, 2,698)\n0.296\n\n\nDrug dose\n\n\n\n\n0.364\n\n\n    25\n49 (47%)\n10 (63%)\n\n\n\n\n    37.5\n10 (9.6%)\n2 (13%)\n\n\n\n\n    50\n45 (43%)\n4 (25%)\n\n\n\n\nAge\n30 (25, 39)\n42 (38, 45)\n0.000\n\n\nRace\n\n\n\n\n0.324\n\n\n    1\n63 (61%)\n11 (69%)\n\n\n\n\n    2\n33 (32%)\n3 (19%)\n\n\n\n\n    7\n1 (1.0%)\n1 (6.3%)\n\n\n\n\n    88\n7 (6.7%)\n1 (6.3%)\n\n\n\n\nWeight\n83 (75, 92)\n70 (64, 81)\n0.001\n\n\nHeight\n1.78 (1.73, 1.82)\n1.63 (1.58, 1.66)\n0.000\n\n\n\n1 Median (IQR); n (%)\n\n\n2 Wilcoxon rank sum test; Fisher’s exact test\n\n\n\n\n\n\n\n\n\n# Summary table for all variables by RACE\ndata_new %&gt;%\n  filter(RACE==1 | RACE==2) %&gt;%\n  mutate(RACE=factor(RACE, levels=c(1,2))) %&gt;%\n  tbl_summary(by=RACE, type=list(where(is.numeric) ~ \"continuous\"),\n              statistic=list(all_continuous() ~ \"{median} ({p25}, {p75})\"),\n              digits=list(all_continuous() ~ 0, HT ~ 2),\n              label=list(Y ~ \"Response\",\n                         DOSE ~ \"Drug dose\",\n                         AGE ~ \"Age\",\n                         SEX ~ \"Sex\",\n                         WT ~ \"Weight\",\n                         HT ~ \"Height\")) %&gt;%\n  add_p(test=list(all_continuous() ~ \"wilcox.test\",\n                  all_categorical() ~ \"fisher.test\"), \n        pvalue_fun=function(x) style_number(x, digits=3)) %&gt;%\n  modify_header(p.value=\"*p*-value\") %&gt;%\n  modify_spanning_header(all_stat_cols() ~ \"**Race**\") %&gt;%\n  as_gt() %&gt;%\n  tab_style(style=cell_text(weight=\"bold\"), \n            locations=cells_body(columns=p.value, rows=as.numeric(p.value)&lt;0.05)) %&gt;%\n  tab_options(table.font.names=\"Times New Roman\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nRace\np-value2\n\n\n1, N = 741\n2, N = 361\n\n\n\n\nResponse\n2,349 (1,507, 3,044)\n2,406 (1,774, 3,077)\n0.649\n\n\nDrug dose\n\n\n\n\n0.252\n\n\n    25\n32 (43%)\n21 (58%)\n\n\n\n\n    37.5\n10 (14%)\n2 (5.6%)\n\n\n\n\n    50\n32 (43%)\n13 (36%)\n\n\n\n\nAge\n36 (26, 42)\n30 (27, 38)\n0.254\n\n\nSex\n\n\n\n\n0.543\n\n\n    1\n63 (85%)\n33 (92%)\n\n\n\n\n    2\n11 (15%)\n3 (8.3%)\n\n\n\n\nWeight\n83 (74, 90)\n83 (75, 92)\n0.962\n\n\nHeight\n1.78 (1.71, 1.82)\n1.77 (1.69, 1.81)\n0.599\n\n\n\n1 Median (IQR); n (%)\n\n\n2 Wilcoxon rank sum test; Fisher’s exact test\n\n\n\n\n\n\n\n\nAs shown, no significant difference exists between RACE=1 and RACE=2. However, those with Sex=2 have older age, lighter weight, and shorter height. Now I want to see the association between Y and other continuous predictors (AGE, WT, HT).\n\n# Scatterplot: Y ~ AGE\nsct_plot1 &lt;- ggplot(data_new, aes(x=AGE, y=Y))+\n  geom_point(size=3, fill=\"seagreen1\", color=\"black\", stroke=1, shape=21)+\n  labs(title=\"Scatterplot: Y ~ AGE\",\n       x=\"Age\", y=\"Y\")+\n  theme_bw()+\n  theme(axis.title=element_text(size=10, color=\"black\", face=\"bold\"),\n        axis.text=element_text(size=8, color=\"black\"),\n        plot.title=element_text(size=12, color=\"black\", face=\"bold\"))\n\n# Scatterplot: Y ~ WT\nsct_plot2 &lt;- ggplot(data_new, aes(x=WT, y=Y))+\n  geom_point(size=3, fill=\"dodgerblue1\", color=\"black\", stroke=1, shape=21)+\n  labs(title=\"Scatterplot: Y ~ WT\",\n       x=\"Weight\", y=\"Y\")+\n  theme_bw()+\n  theme(axis.title=element_text(size=10, color=\"black\", face=\"bold\"),\n        axis.text=element_text(size=8, color=\"black\"),\n        plot.title=element_text(size=12, color=\"black\", face=\"bold\"))\n\n# Scatterplot: Y ~ HT\nsct_plot3 &lt;- ggplot(data_new, aes(x=HT, y=Y))+\n  geom_point(size=3, fill=\"darkorange1\", color=\"black\", stroke=1, shape=21)+\n  labs(title=\"Scatterplot: Y ~ HT\",\n       x=\"Height\", y=\"Y\")+\n  theme_bw()+\n  theme(axis.title=element_text(size=10, color=\"black\", face=\"bold\"),\n        axis.text=element_text(size=8, color=\"black\"),\n        plot.title=element_text(size=12, color=\"black\", face=\"bold\"))\n\n# Combine and output the three scatterplots\nggarrange(sct_plot1, sct_plot2, sct_plot3, ncol=3, nrow=1, align=\"h\", \n          heights=c(1, 1, 1))\n\n\n\n\n\n\n\n\nAs shown, no evident association exist between Y and the three continuous predictors. No I want to look at the distribution of Y across different categories of SEX, RACE, and DOSE.\n\n# Boxplot: Y ~ SEX\nbox_plot1 &lt;- ggplot(data_new, aes(x=SEX, y=Y))+\n  geom_boxplot(fill=\"palevioletred1\", color=\"palevioletred1\", width=.2, linewidth=1, alpha=.6)+\n  labs(title=\"Boxplot: Y ~ SEX\",\n       x=\"Sex\", y=\"Y\")+\n  theme_bw()+\n  theme(axis.title=element_text(size=10, color=\"black\", face=\"bold\"),\n        axis.text=element_text(size=8, color=\"black\"),\n        plot.title=element_text(size=12, color=\"black\", face=\"bold\"))\n\n# Boxplot: Y ~ RACE\nbox_plot2 &lt;- data_new %&gt;%\n  filter(RACE==1 | RACE==2) %&gt;%\n  ggplot(aes(x=RACE, y=Y))+\n  geom_boxplot(fill=\"skyblue1\", color=\"skyblue1\", width=.2, linewidth=1, alpha=.6)+\n  labs(title=\"Boxplot: Y ~ RACE\",\n       x=\"Race\", y=\"Y\")+\n  theme_bw()+\n  theme(axis.title=element_text(size=10, color=\"black\", face=\"bold\"),\n        axis.text=element_text(size=8, color=\"black\"),\n        plot.title=element_text(size=12, color=\"black\", face=\"bold\"))\n\n# Boxplot: Y ~ DOSE\nbox_plot3 &lt;- ggplot(data_new, aes(x=DOSE, y=Y))+\n  geom_boxplot(fill=\"gold1\", color=\"gold1\", width=.2, linewidth=1, alpha=.6)+\n  labs(title=\"Boxplot: Y ~ DOSE\",\n       x=\"Dose\", y=\"Y\")+\n  theme_bw()+\n  theme(axis.title=element_text(size=10, color=\"black\", face=\"bold\"),\n        axis.text=element_text(size=8, color=\"black\"),\n        plot.title=element_text(size=12, color=\"black\", face=\"bold\"))\n\n# Combine and output the three boxplots\nggarrange(box_plot1, box_plot2, box_plot3, ncol=3, nrow=1, align=\"h\", \n          heights=c(1.5, 1.5, 1))\n\n\n\n\n\n\n\n\nAs shown, Y is positively associated with higher DOSE. Now I want to check whether DOSE is associated with AGE, WT, or HT. I will use grouped density plots to examine it.\n\n# Density plot: AGE ~ DOSE\ndens_plot1 &lt;- ggplot(data_new, aes(x=AGE, fill=DOSE, color=DOSE))+\n  geom_density(alpha=.5, linewidth=1)+\n  scale_fill_manual(name=\"Dose\", breaks=levels(data_new$DOSE), \n                    values=c(\"aquamarine1\", \"orange\", \"hotpink1\"))+\n  scale_color_manual(name=\"Dose\", breaks=levels(data_new$DOSE), \n                    values=c(\"aquamarine1\", \"orange\", \"hotpink1\"))+\n  labs(title=\"Density plot: AGE ~ DOSE\",\n       x=\"Age\", y=\"Density\")+\n  theme_bw()+\n  theme(axis.title=element_text(size=10, color=\"black\", face=\"bold\"),\n        axis.text=element_text(size=8, color=\"black\"),\n        plot.title=element_text(size=12, color=\"black\", face=\"bold\"),\n        legend.position=\"top\",\n        legend.title=element_text(size=10, color=\"black\", face=\"bold\"),\n        legend.text=element_text(size=8, color=\"black\"))\n\n# Density plot: WT ~ DOSE\ndens_plot2 &lt;- ggplot(data_new, aes(x=WT, fill=DOSE, color=DOSE))+\n  geom_density(alpha=.5, linewidth=1)+\n  scale_fill_manual(name=\"Dose\", breaks=levels(data_new$DOSE), \n                    values=c(\"aquamarine1\", \"orange\", \"hotpink1\"))+\n  scale_color_manual(name=\"Dose\", breaks=levels(data_new$DOSE), \n                    values=c(\"aquamarine1\", \"orange\", \"hotpink1\"))+\n  labs(title=\"Density plot: WT ~ DOSE\",\n       x=\"Weight\", y=\"Density\")+\n  theme_bw()+\n  theme(axis.title=element_text(size=10, color=\"black\", face=\"bold\"),\n        axis.text=element_text(size=8, color=\"black\"),\n        plot.title=element_text(size=12, color=\"black\", face=\"bold\"),\n        legend.position=\"top\",\n        legend.title=element_text(size=10, color=\"black\", face=\"bold\"),\n        legend.text=element_text(size=8, color=\"black\"))\n\n# Density plot: HT ~ DOSE\ndens_plot3 &lt;- ggplot(data_new, aes(x=HT, fill=DOSE, color=DOSE))+\n  geom_density(alpha=.5, linewidth=1)+\n  scale_fill_manual(name=\"Dose\", breaks=levels(data_new$DOSE), \n                    values=c(\"aquamarine1\", \"orange\", \"hotpink1\"))+\n  scale_color_manual(name=\"Dose\", breaks=levels(data_new$DOSE), \n                    values=c(\"aquamarine1\", \"orange\", \"hotpink1\"))+\n  labs(title=\"Density plot: HT ~ DOSE\",\n       x=\"Height\", y=\"Density\")+\n  theme_bw()+\n  theme(axis.title=element_text(size=10, color=\"black\", face=\"bold\"),\n        axis.text=element_text(size=8, color=\"black\"),\n        plot.title=element_text(size=12, color=\"black\", face=\"bold\"),\n        legend.position=\"top\",\n        legend.title=element_text(size=10, color=\"black\", face=\"bold\"),\n        legend.text=element_text(size=8, color=\"black\"))\n\n# Combine and output the three density plots\nggarrange(dens_plot1, dens_plot2, dens_plot3, ncol=1, nrow=3, align=\"v\", \n          heights=c(1, 1, 1), common.legend=T)\n\n\n\n\n\n\n\n\nThen I will look at the distrbution of the two categorical variables SEX and RACE by DOSE. I will use dodged bar plot to show this.\n\n# Bar plot: SEX ~ DOSE\nbar_plot1 &lt;- ggplot(data_new, aes(x=SEX, fill=DOSE))+\n  geom_bar(position=\"dodge\", color=\"steelblue3\", width=.5, linewidth=1)+\n  scale_fill_manual(name=\"Dose\", breaks=levels(data_new$DOSE), \n                    values=c(\"firebrick4\", \"darkolivegreen3\", \"mediumpurple3\"))+\n  labs(title=\"Bar plot: SEX ~ DOSE\",\n       x=\"Sex\", y=\"Count\")+\n  theme_bw()+\n  theme(axis.title=element_text(size=10, color=\"black\", face=\"bold\"),\n        axis.text=element_text(size=8, color=\"black\"),\n        plot.title=element_text(size=12, color=\"black\", face=\"bold\"),\n        legend.position=\"top\",\n        legend.title=element_text(size=10, color=\"black\", face=\"bold\"),\n        legend.text=element_text(size=8, color=\"black\"))\n\n# Bar plot: RACE ~ DOSE\nbar_plot2 &lt;- data_new %&gt;%\n  filter(RACE==1 | RACE==2) %&gt;%\n  ggplot(aes(x=RACE, fill=DOSE))+\n  geom_bar(position=\"dodge\", color=\"steelblue3\", width=.5, linewidth=1)+\n  scale_fill_manual(name=\"Dose\", breaks=levels(data_new$DOSE), \n                    values=c(\"firebrick4\", \"darkolivegreen3\", \"mediumpurple1\"))+\n  labs(title=\"Bar plot: RACE ~ DOSE\",\n       x=\"Race\", y=\"Count\")+\n  theme_bw()+\n  theme(axis.title=element_text(size=10, color=\"black\", face=\"bold\"),\n        axis.text=element_text(size=8, color=\"black\"),\n        plot.title=element_text(size=12, color=\"black\", face=\"bold\"),\n        legend.position=\"top\",\n        legend.title=element_text(size=10, color=\"black\", face=\"bold\"),\n        legend.text=element_text(size=8, color=\"black\"))\n\n# Combine and output the two bar plots\nggarrange(bar_plot1, bar_plot2, ncol=2, nrow=1, align=\"h\", \n          heights=c(1, 1), common.legend=T)\n\n\n\n\n\n\n\n\nAs shown above, DOSE=37.5 is the least assigned dose level across different sex or race. SEX=1 and RACE=1 received most dose compared to SEX=2 or RACE=2. For the continuous variables, I want to get their correlation matrix shown as a figure.\n\n# Select continuous variables\ncordata &lt;- data_new %&gt;%\n  select(Y, AGE, WT, HT)\n\n# Calculate corr matrix\ncormat &lt;- cor(cordata)\n\n# Make corr matrix plot\ncorrplot(cormat, addCoef.col=\"black\", method=\"color\", diag=F, type=\"lower\", tl.col=\"black\",\n         title=\"Correlation coefficient matrix\", mar=rep(1,4))\n\n\n\n\n\n\n\n\nAs shown, HT is positively associated with WT, but negatively associated with AGE. WT also has a negative correlation with Y. All the rest correlations are weak.\n\n\nModel fitting\nFirst of all, I want to fit a simple linear regression model using Y as the response and DOSE as the predictor. I will use the tidymodels routine to do this fitting.\n\n# Linear regression: Y ~ DOSE\nmodel1 &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  fit(Y ~ DOSE, data_new)\n\n# Output the fitting result\ntidy(model1)\n\n# A tibble: 3 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)    1783.      87.9     20.3  3.97e-40\n2 DOSE37.5        681.     214.       3.19 1.84e- 3\n3 DOSE50         1456.     130.      11.2  3.79e-20\n\n\nAccording to the output, both DOSE=37.5 (\\(\\beta=681\\), se=214) and DOSE=50 (\\(\\beta=1456\\), se=130) are positively associated with higher Y. And increasing DOSE usage will result in higher Y. Using DOSE=50 will result in a higher increase in Y compared to using DOSE=37.5.\nNext, I will regress the response Y on all predictors.\n\n# Linear regression: Y ~ all predictors\nmodel2 &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  fit(Y ~ ., data_new)\n\n# Output the fitting result\ntidy(model2)\n\n# A tibble: 10 × 5\n   term        estimate std.error statistic  p.value\n   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 (Intercept)  4891.     1823.       2.68  8.42e- 3\n 2 DOSE37.5      664.      200.       3.31  1.26e- 3\n 3 DOSE50       1499.      122.      12.2   2.92e-22\n 4 AGE             3.52      7.90     0.446 6.57e- 1\n 5 SEX2         -360.      218.      -1.65  1.01e- 1\n 6 RACE2         149.      130.       1.15  2.54e- 1\n 7 RACE7        -421.      451.      -0.933 3.53e- 1\n 8 RACE88        -65.3     247.      -0.264 7.92e- 1\n 9 WT            -23.3       6.44    -3.62  4.54e- 4\n10 HT           -741.     1108.      -0.669 5.05e- 1\n\n\nAccording to the fitting result, besides higher dose usage, higher Y is also associated with lower weight (\\(\\beta=-23.28\\), se=6.44). A weak association was found for age, sex, race, and height.\nNow I’m printing out the RMSE and R-squared from the two linear regression models.\n\n# Print RMSE and R-squared for both models\nresults1 &lt;- predict(model1, data_new) %&gt;%\n  bind_cols(data_new) %&gt;%\n  metrics(truth=Y, estimate=.pred) %&gt;%\n  print()\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard     666.   \n2 rsq     standard       0.516\n3 mae     standard     517.   \n\nresults2 &lt;- predict(model2, data_new) %&gt;%\n  bind_cols(data_new) %&gt;%\n  metrics(truth=Y, estimate=.pred) %&gt;%\n  print()\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard     590.   \n2 rsq     standard       0.620\n3 mae     standard     445.   \n\n\nAccording to the output, the RMSE for the first model is 666 and the R-squared is 0.52. For the second model, the RMSE is 590 and the R-squared is 0.62. In other words, putting in all predictors can better fit the data compared to only using DOSE, as the second model has a lower RMSE but a higher R-squared.\nI will fit the next logistic regression model using SEX as my response and DOSE as the predictor. The SEX variable has two levels 1 and 2, while 1 is the reference group.\n\n# Logistic regression: SEX ~ DOSE\nmodel3 &lt;- logistic_reg() %&gt;%\n  set_engine(\"glm\") %&gt;%\n  set_mode(\"classification\") %&gt;%\n  fit(SEX ~ DOSE, data_new)\n\n# Output the fitting result\ntidy(model3)\n\n# A tibble: 3 × 5\n  term        estimate std.error statistic    p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1 (Intercept)  -1.59       0.347   -4.58   0.00000465\n2 DOSE37.5     -0.0202     0.849   -0.0238 0.981     \n3 DOSE50       -0.831      0.627   -1.33   0.185     \n\n\nAs shown, being SEX=1 is more likely to receive all three level of dose usage compared to SEX=2. The intercept denote the log odds of SEX=2 (vs SEX=1) when given DOSE=25. The coefficients -0.02 (se=0.85) and -0.83 (se=0.63) denote the change of log-odds when given DOSE=37.5 and DOSE=50, respectively. Next, I will fit the logistic regression with all predictors.\n\n# Logistic regression: SEX ~ all predictors\nmodel4 &lt;- logistic_reg() %&gt;%\n  set_engine(\"glm\") %&gt;%\n  set_mode(\"classification\") %&gt;%\n  fit(SEX ~ DOSE + AGE + RACE + WT + HT, data_new)\n\n# Output the fitting result\ntidy(model4)\n\n# A tibble: 9 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  55.7      16.8      3.31    0.000937\n2 DOSE37.5     -3.11      1.84    -1.69    0.0916  \n3 DOSE50       -2.47      1.33    -1.86    0.0633  \n4 AGE           0.114     0.0696   1.64    0.101   \n5 RACE2        -2.40      1.39    -1.73    0.0843  \n6 RACE7         0.0168    3.56     0.00473 0.996   \n7 RACE88       -1.74      2.34    -0.743   0.457   \n8 WT           -0.0463    0.0716  -0.646   0.518   \n9 HT          -33.3      10.7     -3.10    0.00191 \n\n\nStill, dose usage is a significant predictor for SEX. When including all predictors, higher probability of being SEX=2 is also associated with lower HT (\\(\\beta=-33.26\\), se=10.72). Now I’m printing out the accuracy and ROC-AUC from the two logistic regression models.\n\n# Print RMSE and R-squared for both models\nresults3 &lt;- predict(model3, data_new, type=\"class\") %&gt;%\n  bind_cols(predict(model3, data_new, type=\"prob\")) %&gt;%\n  bind_cols(data_new) %&gt;%\n  metrics(truth=SEX, estimate=.pred_class, .pred_1) %&gt;%\n  print()\n\n# A tibble: 4 × 3\n  .metric     .estimator .estimate\n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy    binary         0.867\n2 kap         binary         0    \n3 mn_log_loss binary         0.384\n4 roc_auc     binary         0.592\n\nresults4 &lt;- predict(model4, data_new, type=\"class\") %&gt;%\n  bind_cols(predict(model4, data_new, type=\"prob\")) %&gt;%\n  bind_cols(data_new) %&gt;%\n  metrics(truth=SEX, estimate=.pred_class, .pred_1) %&gt;%\n  print()\n\n# A tibble: 4 × 3\n  .metric     .estimator .estimate\n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy    binary         0.95 \n2 kap         binary         0.772\n3 mn_log_loss binary         0.133\n4 roc_auc     binary         0.978\n\n\nAs shown, for the logistic regression model only using DOSE as the predictor, the classification accuracy is 0.87 and the ROC-AUC is 0.59. For the second logistic regression model using all predictors, the accuracy is 0.95 and the ROC-AUC is 0.98. By comparison, using all predictors has a better classification performance than using just DOSE. Though this research question does not make scientific science, but the assessment for the two models are straight forward for choosing the better one.\nBelow is an exercise for Week 10.\n\n\nData prep\nFirst, let’s continue using the formatted dataset and only keep variables Y, DOSE, AGE, SEX, WT, and HT.\n\n# Select variables\ndata_new10 &lt;- data_new %&gt;%\n  select(Y, DOSE, AGE, SEX, WT, HT)\nsummary(data_new10)\n\n       Y            DOSE         AGE        SEX           WT        \n Min.   : 826.4   25  :59   Min.   :18.00   1:104   Min.   : 56.60  \n 1st Qu.:1700.5   37.5:12   1st Qu.:26.00   2: 16   1st Qu.: 73.17  \n Median :2349.1   50  :49   Median :31.00           Median : 82.10  \n Mean   :2445.4             Mean   :33.00           Mean   : 82.55  \n 3rd Qu.:3050.2             3rd Qu.:40.25           3rd Qu.: 90.10  \n Max.   :5606.6             Max.   :50.00           Max.   :115.30  \n       HT       \n Min.   :1.520  \n 1st Qu.:1.700  \n Median :1.770  \n Mean   :1.759  \n 3rd Qu.:1.813  \n Max.   :1.930  \n\n\nNow I’m setting a seed rngseed and split the dataset into a 75% train set and a 25% test set.\n\n# Set seed\nrngseed &lt;- 1234\nset.seed(rngseed)\n\n# Split dataset into a 75% train set and a 25% test set\ndata_split &lt;- initial_split(data_new10, prop=.75)\ntrain_data &lt;- training(data_split)\ntest_data  &lt;- testing(data_split)\n\n\n\nModel fitting\nI will fit two linear regression models on the training set. The first one only uses DOSE as the predictor.\n\n# Linear regression: Y ~ DOSE\nmodel1_train &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  fit(Y ~ DOSE, train_data)\n\n# Output the fitting result\ntidy(model1_train)\n\n# A tibble: 3 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)    1873.      109.     17.2  1.07e-29\n2 DOSE37.5        651.      275.      2.36 2.03e- 2\n3 DOSE50         1336.      158.      8.45 5.97e-13\n\n\nThe second model will use all predictors. But the fit is still on the traning set.\n\n# Linear regression: Y ~ DOSE + AGE + SEX + WT + HT\nmodel2_train &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  fit(Y ~ ., train_data)\n\n# Output the fitting result\ntidy(model2_train)\n\n# A tibble: 7 × 5\n  term         estimate std.error statistic  p.value\n  &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  5764.      2178.      2.65   9.72e- 3\n2 DOSE37.5      640.       255.      2.51   1.39e- 2\n3 DOSE50       1384.       147.      9.44   8.65e-15\n4 AGE            -0.119      9.66   -0.0123 9.90e- 1\n5 SEX2         -571.       287.     -1.99   5.00e- 2\n6 WT            -22.8        7.72   -2.95   4.13e- 3\n7 HT          -1117.      1368.     -0.817  4.17e- 1\n\n\n\n\nModel performance assessment 1\nI will print RMSE for the two models fitted above.\n\n# Print RMSE for the two models above.\nresults1_train &lt;- predict(model1_train, train_data) %&gt;%\n  bind_cols(train_data) %&gt;%\n  metrics(truth=Y, estimate=.pred) %&gt;%\n  print()\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard     703.   \n2 rsq     standard       0.451\n3 mae     standard     546.   \n\nresults2_train &lt;- predict(model2_train, train_data) %&gt;%\n  bind_cols(train_data) %&gt;%\n  metrics(truth=Y, estimate=.pred) %&gt;%\n  print()\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard     627.   \n2 rsq     standard       0.563\n3 mae     standard     486.   \n\n\nI will fit a null model with only an intercept to compare RMSE.\n\n# Fit the null model\nmodel0_train &lt;- null_model() %&gt;%\n  set_engine(\"parsnip\") %&gt;%\n  set_mode(\"regression\") %&gt;%\n  fit(Y ~ ., train_data)\n\n# Output the fitting result\ntidy(model0_train)\n\n# A tibble: 1 × 1\n  value\n  &lt;dbl&gt;\n1 2509.\n\n# Print RMSE for the null model\nresults0_train &lt;- predict(model0_train, train_data) %&gt;%\n  bind_cols(train_data) %&gt;%\n  metrics(truth=Y, estimate=.pred) %&gt;%\n  print()\n\nWarning: There was 1 warning in `dplyr::summarise()`.\nℹ In argument: `.estimate = metric_fn(truth = Y, estimate = .pred, na_rm =\n  na_rm)`.\nCaused by warning:\n! A correlation computation is required, but `estimate` is constant and has 0 standard deviation, resulting in a divide by 0 error. `NA` will be returned.\n\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        948.\n2 rsq     standard         NA \n3 mae     standard        765.\n\n\nAccording to the output, the model with only an intercept has the highest RMSE=948. The model with only DOSE as the predictor has the second highest RMSE=703. The model with all predictors included has the lowest RMSE=627. Just based on RMSE, the most complex model has the best performance on the training set, as its RMSE is the lowest.\n\n\nModel performance assessment 2\nI will apply a 10-fold cross-validation (CV) to examine the performance of the two models. The CV will be conducted on the training set, which will be split into 10 groups with 9 of them used for model fitting. First of all, let’s split the data.\n\n# Set seed\nset.seed(rngseed)\n\n# 10-fold sampling\nfolds &lt;- vfold_cv(train_data, v=10)\nfolds\n\n#  10-fold cross-validation \n# A tibble: 10 × 2\n   splits         id    \n   &lt;list&gt;         &lt;chr&gt; \n 1 &lt;split [81/9]&gt; Fold01\n 2 &lt;split [81/9]&gt; Fold02\n 3 &lt;split [81/9]&gt; Fold03\n 4 &lt;split [81/9]&gt; Fold04\n 5 &lt;split [81/9]&gt; Fold05\n 6 &lt;split [81/9]&gt; Fold06\n 7 &lt;split [81/9]&gt; Fold07\n 8 &lt;split [81/9]&gt; Fold08\n 9 &lt;split [81/9]&gt; Fold09\n10 &lt;split [81/9]&gt; Fold10\n\n\nNow, let’s fit the first model (with only DOSE as a predictor) to 9 of the splits for 10 times, and calculate the RMSE for the last split.\n\n# Model setting\nmodel1_spec &lt;- linear_reg() %&gt;% set_engine(\"lm\")\n# Set the workflow: model 1\ncv_model1 &lt;- workflow() %&gt;%\n  add_model(model1_spec) %&gt;%\n  add_formula(Y ~ DOSE)\n\n# Set seed\nset.seed(rngseed)\n\n# Fit the data\ncv_model1_fit &lt;- cv_model1 %&gt;% fit_resamples(folds)\n\n# Mean of RMSE\ncollect_metrics(cv_model1_fit) %&gt;%\n  filter(.metric==\"rmse\") %&gt;%\n  pull(mean)\n\n[1] 696.7098\n\n# Standard error of RMSE\ncollect_metrics(cv_model1_fit) %&gt;%\n  filter(.metric==\"rmse\") %&gt;%\n  pull(std_err)\n\n[1] 68.09511\n\n\nSimilarly, I will run model2 following the same routine and calcualte the mean RMSE.\n\n# Model setting\nmodel2_spec &lt;- linear_reg() %&gt;% set_engine(\"lm\")\n# Set the workflow: model 2\ncv_model2 &lt;- workflow() %&gt;%\n  add_model(model2_spec) %&gt;%\n  add_formula(Y ~ .)\n\n# Set seed\nset.seed(rngseed)\n\n# Fit the data\ncv_model2_fit &lt;- cv_model2 %&gt;% fit_resamples(folds)\n\n# Mean of RMSE\ncollect_metrics(cv_model2_fit) %&gt;%\n  filter(.metric==\"rmse\") %&gt;%\n  pull(mean)\n\n[1] 652.7739\n\n# Standard error of RMSE\ncollect_metrics(cv_model2_fit) %&gt;%\n  filter(.metric==\"rmse\") %&gt;%\n  pull(std_err)\n\n[1] 63.59876\n\n\nAccording to the output above, model 1 has a smaller mean RMSE compared to fitting on the whole training set (697&lt;703). However, model 2 has a larger mean RMSE when fitted using the 10-fold CV (653&gt;627). When comparing both models in the 10-fold CV, model 2 has a more stable performance than model 1 as its standard error of mean RMSE is smaller (64&lt;68).\nNow, let’s set a different seed and repeat what we did to check if the conclusion still holds.\n\n# Set seed\nset.seed(111)\n\n# 10-fold sampling\nfolds_ns &lt;- vfold_cv(train_data, v=10)\n\n# Model1:\n# Set seed\nset.seed(111)\ncv_model1_fit_ns &lt;- cv_model1 %&gt;% fit_resamples(folds_ns)\n# Mean of RMSE\ncollect_metrics(cv_model1_fit_ns) %&gt;%\n  filter(.metric==\"rmse\") %&gt;%\n  pull(mean)\n\n[1] 690.6832\n\n# Standard error of RMSE\ncollect_metrics(cv_model1_fit_ns) %&gt;%\n  filter(.metric==\"rmse\") %&gt;%\n  pull(std_err)\n\n[1] 64.01245\n\n# Model2:\n# Set seed\nset.seed(111)\ncv_model2_fit_ns &lt;- cv_model2 %&gt;% fit_resamples(folds_ns)\n# Mean of RMSE\ncollect_metrics(cv_model2_fit_ns) %&gt;%\n  filter(.metric==\"rmse\") %&gt;%\n  pull(mean)\n\n[1] 657.9127\n\n# Standard error of RMSE\ncollect_metrics(cv_model2_fit_ns) %&gt;%\n  filter(.metric==\"rmse\") %&gt;%\n  pull(std_err)\n\n[1] 46.0654\n\n\nAs shown, the conclusion still holds after setting a new seed. But considering the small sample size, this is likely a “lucky” result that more validations are needed.\n\n\nThis section added by Hope Grismer\nThe code below is to visualize model fitting from the null model, model 1, and model 2.\n\n# Null model: prediction on the train set\npred_model0_gz &lt;- predict(model0_train, train_data) %&gt;%\n  bind_cols(train_data[\"Y\"])\ncolnames(pred_model0_gz) &lt;- c(\"pred\", \"Y\")\n \n# Model 1: prediction on the train set\npred_model1_gz &lt;- predict(model1_train, train_data) %&gt;%\n bind_cols(train_data[\"Y\"])\ncolnames(pred_model1_gz) &lt;- c(\"pred\", \"Y\")\n \n# Model 2: prediction on the train set\npred_model2_gz &lt;- predict(model2_train, train_data) %&gt;%\n  bind_cols(train_data[\"Y\"])\ncolnames(pred_model2_gz) &lt;- c(\"pred\", \"Y\")\n \n# Combine the three data sets and make a plot\ncomb_gz &lt;- rbind(pred_model0_gz, pred_model1_gz, pred_model2_gz) %&gt;%\n   mutate(Model=c(rep(\"Null model\", nrow(pred_model0_gz)), \n                  rep(\"Model 1\", nrow(pred_model1_gz)), \n                  rep(\"Model 2\", nrow(pred_model2_gz)))) %&gt;%\n   ggplot(aes(x=Y, y=pred, fill=Model))+\n   geom_point(size=4, stroke=1, alpha=0.7, shape=21)+\n   geom_abline(intercept=0, slope=1, linetype=\"dashed\", color=\"black\", linewidth=2)+\n   scale_fill_manual(name=\"\", values=c(\"green\",\"palevioletred1\",\"darkorange\"))+\n   scale_x_continuous(limits=c(0, 5000))+\n   scale_y_continuous(limits=c(0, 5000))+\n   labs(x=\"Observed value\", y=\"Predicted value\")+\n   theme_bw()+\n   theme(axis.title.x=element_text(size=25,color=\"black\",margin=margin(t=15),face=\"bold\"),\n         axis.title.y=element_text(size=25,color=\"black\",margin=margin(r=15),face=\"bold\"),\n         axis.text.x=element_text(color=\"black\",size=20,vjust=0),\n         axis.text.y=element_text(color=\"black\",size=20,hjust=1), \n         legend.position=\"top\",\n         legend.title=element_text(size=20), \n         legend.text=element_text(size=18,vjust=0))\ncomb_gz\n\nWarning: Removed 3 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nAs shown, the predictions from the null model form a horizontal line because it only predicts the mean value of the response. The predictions from model 1 show three GREEN horizontal lines since this model uses DOSE as the only predictor, which has three possible values.\nNow, I’m moving on to create a residual plot for model 2.\n\n# Residual plot for model 2\n pred_model2_res_gz &lt;- pred_model2_gz %&gt;%\n   mutate(res=pred-Y) %&gt;%\n   ggplot(aes(x=pred, y=res))+\n   geom_point(size=4, stroke=1, alpha=0.7, shape=21, fill=\"firebrick3\")+\n   geom_abline(intercept=0, slope=0, linetype=\"dashed\", color=\"black\", linewidth=2)+\n   scale_x_continuous(limits=c(0, 5000))+\n   scale_y_continuous(limits=c(-2000, 2000))+\n   labs(x=\"Predicted value\", y=\"Residual\")+\n   theme_bw()+\n   theme(axis.title.x=element_text(size=25,color=\"black\",margin=margin(t=15),face=\"bold\"),\n         axis.title.y=element_text(size=25,color=\"black\",margin=margin(r=15),face=\"bold\"),\n         axis.text.x=element_text(color=\"black\",size=20,vjust=0),\n         axis.text.y=element_text(color=\"black\",size=20,hjust=1))\n pred_model2_res_gz\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nThe graph shown suggests that model 2 is performing well overall because even though there are a few points with smaller residuals, the points are randomly scattered around y=0.\n\n\nModel predictions and uncertainty\nNow I want to run a bootstrap to evaluate model 2. The code for that is shown below.\n\nlibrary(rsample)\n# Set seed\nset.seed(rngseed)\n \n# Bootstrap: 100\ndat_bs &lt;- bootstraps(train_data, times=100)\n\n# Model setting\nmodel2_spec &lt;- linear_reg() %&gt;% set_engine(\"lm\")\n \n# Fit model 2 on 100 bootstraps and store the predictions\npred_bs &lt;- matrix(NA, nrow=nrow(dat_bs), ncol=nrow(train_data))\nfor (i in seq_len(nrow(dat_bs))){\n   fit_i &lt;- fit(model2_spec, Y ~ ., analysis(dat_bs$splits[[i]]))\n   preds_i &lt;- predict(fit_i, new_data=train_data)$.pred\n   pred_bs[i,] &lt;- preds_i\n}\n \n# Calculate 95% CIs\npreds &lt;- pred_bs |&gt; apply(2, quantile,  c(0.025, 0.5, 0.975)) |&gt;  t()\n \n# Make a plot to show the estimates\nplot_est_gz &lt;- train_data %&gt;%\n  mutate(point_est=pred_model2_gz$pred,\n          median=preds[,2],\n          lower=preds[,1],\n          upper=preds[,3]) %&gt;%\n  ggplot(aes(x=Y))+\n   geom_abline(intercept=0, slope=1, linetype=\"dashed\", color=\"black\", linewidth=1)+\n   geom_point(aes(y=point_est), color=\"gray20\", size=2, shape=16, alpha=.8)+ \n   geom_point(aes(y=median), color=\"firebrick2\", size=2, shape=16, alpha=.8)+\n   geom_errorbar(aes(ymin=lower, ymax=upper), width=.2, color=\"palevioletred2\", alpha=.8)+\n   labs(x=\"Observed value\", y=\"Predicted value\")+\n   scale_x_continuous(limits=c(0, 5000))+\n   scale_y_continuous(limits=c(0, 5000))+\n   theme_bw()+\n   theme(axis.title.x=element_text(size=25,color=\"black\",margin=margin(t=15),face=\"bold\"),\n         axis.title.y=element_text(size=25,color=\"black\",margin=margin(r=15),face=\"bold\"),\n         axis.text.x=element_text(color=\"black\",size=20,vjust=0),\n         axis.text.y=element_text(color=\"black\",size=20,hjust=1))\n plot_est_gz\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\nRemoved 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nBased on the output, the bootstrapping results are pretty much in line with just fitting model 2 on the train set. Almost all the confidence intervals (in red) cover the point predictions (in black). Looking at the big picture, the data points are spread around the diagonal, which means the predicted values are pretty close to the observed ones. So, overall, we can say that model 2 is performing well based on this.\n\n\nEnd of Hope Grismer’s contribution\n\n\nFinal evaluation using test data\nNow I want to fit model 2 onto the test set. I will make a plot for predicted values versus observed values for the fit on both the training set and the test set.\n\n# Model 2: prediction on the train set\npred_model2_train &lt;- predict(model2_train, train_data) %&gt;%\n  bind_cols(train_data[\"Y\"])\ncolnames(pred_model2_train) &lt;- c(\"pred\", \"Y\")\n\n# Model 2: prediction on the test set\npred_model2_test &lt;- predict(model2_train, test_data) %&gt;%\n  bind_cols(test_data[\"Y\"])\ncolnames(pred_model2_test) &lt;- c(\"pred\", \"Y\")\n\n# Combine the two data sets and make a plot\nmodel2_plot &lt;- rbind(pred_model2_train, pred_model2_test) %&gt;%\n  mutate(set=c(rep(\"train set\", nrow(train_data)), rep(\"test set\", nrow(test_data)))) %&gt;%\n  ggplot(aes(x=Y, y=pred, fill=set))+\n  geom_point(size=3, stroke=1, alpha=0.8, shape=21)+\n  scale_fill_manual(name=\"\", values=c(\"dodgerblue1\",\"palevioletred1\"))+\n  labs(x=\"Observed value\", y=\"Predicted value\")+\n  theme_bw()+\n  theme(axis.title.x=element_text(size=25,color=\"black\",margin=margin(t=15),face=\"bold\"),\n        axis.title.y=element_text(size=25,color=\"black\",margin=margin(r=15),face=\"bold\"),\n        axis.text.x=element_text(color=\"black\",size=20,vjust=0),\n        axis.text.y=element_text(color=\"black\",size=20,hjust=1), \n        legend.position=\"top\",\n        legend.title=element_text(size=20), \n        legend.text=element_text(size=18,vjust=0))\nmodel2_plot\n\n\n\n\n\n\n\n\nAs shown, data points from the train set and the test set are well mixed.\n\n\nOverall model assessment\nBased on all evaluation conducted above, the null model is not really helpful as no predictors are included. Theoretically, the null model only predicts the mean value of the response, while some variation could be explained by the available predictors. This is proved by its high RMSE and the visualization.\nModel 1 appears better than the null model, as its RMSE is smaller. However, according to the visualization, the discrete predictor DOSE is not necessarily the best. But this model does have an evident improvement compared to the null model. The 10-fold CV results also demonstrate that this model has a stable performance on the test set.\nModel 2 includes all the predictors and have the lowest RMSE compared to the other two models. However, its performance in the 10-fold CV indicates that it potentially has an over-fitting problem. I think its performance on the test set is acceptable, but a feature selection procedure may make it more concise and improve its performance on unseen data to some extent."
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html",
    "href": "ml-models-exercise/ml-models-exercise.html",
    "title": "Machine Learning Models",
    "section": "",
    "text": "Setup and Preliminaries\nFirst of all, let’s load required packages and import the data set from Week 10.\n\n# Load required package\nlibrary(here)\n\nhere() starts at C:/Users/86182/Desktop/EPID 8060E/MADA/GuozhengYang-MADA-portfolio\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2\n──\n\n\n✔ ggplot2 3.5.1     ✔ purrr   1.0.2\n✔ tibble  3.2.1     ✔ dplyr   1.1.3\n✔ tidyr   1.3.1     ✔ stringr 1.5.1\n✔ readr   2.1.2     ✔ forcats 1.0.0\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'purrr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'stringr' was built under R version 4.2.3\n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n✔ broom        1.0.1     ✔ rsample      1.1.0\n✔ dials        1.0.0     ✔ tune         1.0.0\n✔ infer        1.0.3     ✔ workflows    1.1.0\n✔ modeldata    1.0.1     ✔ workflowsets 1.0.0\n✔ parsnip      1.0.1     ✔ yardstick    1.1.0\n✔ recipes      1.0.1     \n\n\nWarning: package 'scales' was built under R version 4.2.3\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts.\n\nlibrary(ggplot2)\nlibrary(corrplot)\n\ncorrplot 0.92 loaded\n\nlibrary(glmnet)\n\nLoading required package: Matrix\n\nAttaching package: 'Matrix'\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\nLoaded glmnet 4.1-4\n\nlibrary(ranger)\n\n\n# Import data\ndata &lt;- readRDS(\"../ml-models-exercise/data10.rds\")\nsummary(data)\n\n       Y            DOSE         AGE        SEX     RACE          WT        \n Min.   : 826.4   25  :59   Min.   :18.00   1:104   1 :74   Min.   : 56.60  \n 1st Qu.:1700.5   37.5:12   1st Qu.:26.00   2: 16   2 :36   1st Qu.: 73.17  \n Median :2349.1   50  :49   Median :31.00           7 : 2   Median : 82.10  \n Mean   :2445.4             Mean   :33.00           88: 8   Mean   : 82.55  \n 3rd Qu.:3050.2             3rd Qu.:40.25                   3rd Qu.: 90.10  \n Max.   :5606.6             Max.   :50.00                   Max.   :115.30  \n       HT       \n Min.   :1.520  \n 1st Qu.:1.700  \n Median :1.770  \n Mean   :1.759  \n 3rd Qu.:1.813  \n Max.   :1.930  \n\n\n\n\nProcessing\nHere I’m collapsing all RACE categories other than 1 and 2 into 3.\n\n# Combine RACE categories\ndata &lt;- data %&gt;%\n  mutate(DOSE=as.numeric(as.character(DOSE))) %&gt;%\n  mutate(SEX=as.numeric(as.character(SEX))) %&gt;%\n  mutate(RACE=as.numeric(as.character(RACE))) %&gt;%\n  mutate(RACE=case_when(RACE %in% c(7, 88) ~ 3,\n                        TRUE ~ RACE))\n\n\n\nPairwise correlations\nBelow I’m making a correlation plot for all continuous variables.\n\n# Select continuous variables\ncont_data &lt;- data %&gt;% select(Y, AGE, WT, HT)\n\n# Correlation matrix\ncont_data_cor &lt;- cor(cont_data)\n\n# Correlation plot\ncorrplot(cont_data_cor, method=\"number\", type=\"lower\", tl.col=\"black\")\n\n\n\n\n\n\n\n\nAs shown, no strong correlation is observed. The highest correlation is between WT and HT (r=0.6).\n\n\nFeature engineering\nLet’s create a new variable BMI.\n\n# Calculate BMI\ndata &lt;- data %&gt;%\n  mutate(BMI=WT/HT^2)\nhist(data$BMI)\n\n\n\n\n\n\n\n\nAs shown, the calculated BMI is within a normal range. The units are likely to be used correctly.\n\n\nModel building\nI will fit three models below. The first one is a linear regression model; the second is a LASSO regression model; the third is a random forest model.\n\n\nFirst fit\nLet’s fit the linear regression model first. I will output RMSE and make a plot for observed values vs predicted values.\n\n# Linear regression: Y ~ all predictors\nrcp &lt;- recipe(Y ~ ., data=data)\nlm_model &lt;- linear_reg() %&gt;% set_engine(\"lm\")\nlm_wf &lt;- workflow() %&gt;% add_model(lm_model) %&gt;% add_recipe(rcp)\nmodel1 &lt;- lm_wf %&gt;% fit(data=data)\n\n# Print RMSE\nresults1 &lt;- predict(model1, data) %&gt;%\n  bind_cols(data) %&gt;%\n  metrics(truth=Y, estimate=.pred) %&gt;%\n  print()\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard     581.   \n2 rsq     standard       0.631\n3 mae     standard     456.   \n\n# Plot: observed vs predicted\npred_model1 &lt;- predict(model1, data) %&gt;%\n  bind_cols(data[\"Y\"])\ncolnames(pred_model1) &lt;- c(\"pred\", \"Y\")\nggplot(pred_model1, aes(x=Y, y=pred))+\n   geom_point(size=4, alpha=0.8, color=\"darkred\")+\n   geom_abline(intercept=0, slope=1, linetype=\"dashed\", color=\"black\", linewidth=2)+\n   scale_x_continuous(limits=c(0, 5000))+\n   scale_y_continuous(limits=c(0, 5000))+\n   labs(x=\"Observed value\", y=\"Predicted value\")+\n   theme_bw()+\n   theme(axis.title.x=element_text(size=25,color=\"black\",margin=margin(t=15),face=\"bold\"),\n         axis.title.y=element_text(size=25,color=\"black\",margin=margin(r=15),face=\"bold\"),\n         axis.text.x=element_text(color=\"black\",size=20,vjust=0),\n         axis.text.y=element_text(color=\"black\",size=20,hjust=1), \n         legend.position=\"top\",\n         legend.title=element_text(size=20), \n         legend.text=element_text(size=18,vjust=0))\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nFor linear regression, we have RMSE=581. Next, I will fit a LASSO regression model.\n\n# LASSO regression: Y ~ all predictors\nls_model &lt;- linear_reg(penalty=.1) %&gt;% set_engine(\"glmnet\")\nls_wf &lt;- workflow() %&gt;% add_model(ls_model) %&gt;% add_recipe(rcp)\nmodel2 &lt;- ls_wf %&gt;% fit(data=data)\n\n# Print RMSE\nresults2 &lt;- predict(model2, data) %&gt;%\n  bind_cols(data) %&gt;%\n  metrics(truth=Y, estimate=.pred) %&gt;%\n  print()\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard     581.   \n2 rsq     standard       0.631\n3 mae     standard     455.   \n\n# Plot: observed vs predicted\npred_model2 &lt;- predict(model2, data) %&gt;%\n  bind_cols(data[\"Y\"])\ncolnames(pred_model2) &lt;- c(\"pred\", \"Y\")\nggplot(pred_model2, aes(x=Y, y=pred))+\n   geom_point(size=4, alpha=0.8, color=\"darkred\")+\n   geom_abline(intercept=0, slope=1, linetype=\"dashed\", color=\"black\", linewidth=2)+\n   scale_x_continuous(limits=c(0, 5000))+\n   scale_y_continuous(limits=c(0, 5000))+\n   labs(x=\"Observed value\", y=\"Predicted value\")+\n   theme_bw()+\n   theme(axis.title.x=element_text(size=25,color=\"black\",margin=margin(t=15),face=\"bold\"),\n         axis.title.y=element_text(size=25,color=\"black\",margin=margin(r=15),face=\"bold\"),\n         axis.text.x=element_text(color=\"black\",size=20,vjust=0),\n         axis.text.y=element_text(color=\"black\",size=20,hjust=1), \n         legend.position=\"top\",\n         legend.title=element_text(size=20), \n         legend.text=element_text(size=18,vjust=0))\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nFor LASSO regression, we have RMSE=581, which is very similar to linear regression. This is because the predictors have a low correlation, and LASSO regression does not have to fix the collinearity problem. That being said, the linear regression model and LASSO regression should have similar results as each predictor has some unique predictability.\nNext, I will fit a random forest model.\n\n# Set a seed\nrngseed &lt;- 1234\n\n# RF: Y ~ all predictors\nrf_model &lt;- rand_forest() %&gt;% set_engine(\"ranger\", seed=rngseed) %&gt;%\n  set_mode(\"regression\")\nrf_wf &lt;- workflow() %&gt;% add_model(rf_model) %&gt;% add_recipe(rcp)\nmodel3 &lt;- rf_wf %&gt;% fit(data=data)\n\n# Print RMSE\nresults3 &lt;- predict(model3, data) %&gt;%\n  bind_cols(data) %&gt;%\n  metrics(truth=Y, estimate=.pred) %&gt;%\n  print()\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard     362.   \n2 rsq     standard       0.901\n3 mae     standard     282.   \n\n# Plot: observed vs predicted\npred_model3 &lt;- predict(model3, data) %&gt;%\n  bind_cols(data[\"Y\"])\ncolnames(pred_model3) &lt;- c(\"pred\", \"Y\")\nggplot(pred_model3, aes(x=Y, y=pred))+\n   geom_point(size=4, alpha=0.8, color=\"darkred\")+\n   geom_abline(intercept=0, slope=1, linetype=\"dashed\", color=\"black\", linewidth=2)+\n   scale_x_continuous(limits=c(0, 5000))+\n   scale_y_continuous(limits=c(0, 5000))+\n   labs(x=\"Observed value\", y=\"Predicted value\")+\n   theme_bw()+\n   theme(axis.title.x=element_text(size=25,color=\"black\",margin=margin(t=15),face=\"bold\"),\n         axis.title.y=element_text(size=25,color=\"black\",margin=margin(r=15),face=\"bold\"),\n         axis.text.x=element_text(color=\"black\",size=20,vjust=0),\n         axis.text.y=element_text(color=\"black\",size=20,hjust=1), \n         legend.position=\"top\",\n         legend.title=element_text(size=20), \n         legend.text=element_text(size=18,vjust=0))\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nFor random forest, we have RMSE=362, which is the lowest amont all three models. However, this is likely due to overfitting.\n\n\nTuning the models\nFirst, I want to tune the penalty parameter in LASSO regression.\n\n# Define parameter set\nls_grid &lt;- tibble(penalty=10^seq(-5, 2, length.out=50))\n\n# Workflow to tune the parameter\nls_tune &lt;- linear_reg(penalty=tune()) %&gt;% set_engine(\"glmnet\")\nls_wf &lt;- workflow() %&gt;% add_model(ls_tune) %&gt;% add_recipe(rcp)\nls_tune_result &lt;- ls_wf %&gt;% \n  tune_grid(resamples=apparent(data), \n            grid=ls_grid, metrics=metric_set(yardstick::rmse))\n\n# Make a plot of tuning results\nls_tune_result_df &lt;- as.data.frame(ls_tune_result$.metrics)\nggplot(ls_tune_result_df, aes(x=penalty, y=.estimate))+\n  geom_line(linewidth=1, color=\"darkred\")+\n  scale_x_log10()+\n  labs(x=\"Log penalty parameter\", y=\"RMSE\")+\n  theme_bw()+\n  theme(axis.title.x=element_text(size=25,color=\"black\",margin=margin(t=15),face=\"bold\"),\n         axis.title.y=element_text(size=25,color=\"black\",margin=margin(r=15),face=\"bold\"),\n         axis.text.x=element_text(color=\"black\",size=20,vjust=0),\n         axis.text.y=element_text(color=\"black\",size=20,hjust=1), \n         legend.position=\"top\",\n         legend.title=element_text(size=20), \n         legend.text=element_text(size=18,vjust=0))\n\n\n\n\n\n\n\n\nAs shown, RMSE increases as the penalty parameter increases. The penalty parameter in LASSO regression is used to adjust the penalty of including too many predictors on the loss function. When the penalty parameter is small, the loss function is extremely close to the loss function in linear regression. That’s why the RMSE is similar to linear regression when the penalty parameter is small.\nOn the other hand, as the penalty parameter increases, the loss function of LASSO regression becomes more and more different from the one of linear regression. With greater penalty, the RMSE increases.\nNow let’s tune the parameters for the random forest model.\n\n# Define parameter set\nrf_grid &lt;- grid_regular(mtry(range=c(1, 7)),\n                        min_n(range=c(1, 21)),\n                        levels=7)\n\n# Workflow to tune the parameter\nrf_model &lt;- rand_forest(mtry=tune(), min_n=tune(), trees=300) %&gt;%  \n  set_engine(\"ranger\", seed=rngseed) %&gt;%  \n  set_mode(\"regression\")\nrf_wf &lt;- workflow() %&gt;% add_model(rf_model) %&gt;% add_recipe(rcp)\nrf_tune_result &lt;- rf_wf %&gt;% \n  tune_grid(resamples=apparent(data), \n            grid=rf_grid, metrics=metric_set(yardstick::rmse))\n\n# Make a plot of tuning results\nrf_tune_result_df &lt;- as.data.frame(rf_tune_result$.metrics)\nggplot(rf_tune_result_df, aes(x=mtry, y=min_n, fill=.estimate))+\n  geom_tile()+\n  scale_fill_viridis_c(name=\"RMSE\") +\n  labs(x=\"mtry\", y=\"min_n\") +\n  theme_bw()+\n  theme(axis.title.x=element_text(size=25,color=\"black\",margin=margin(t=15),face=\"bold\"),\n         axis.title.y=element_text(size=25,color=\"black\",margin=margin(r=15),face=\"bold\"),\n         axis.text.x=element_text(color=\"black\",size=20,vjust=0),\n         axis.text.y=element_text(color=\"black\",size=20,hjust=1), \n         legend.position=\"top\",\n         legend.title=element_text(size=20), \n         legend.text=element_text(size=12,vjust=0))\n\n\n\n\n\n\n\n\nAccording to the output above, higher mtry and lower min_n lead to lower RMSE.\n\n\nTuning with CV\nNow I’m using CV to tune the parameters. Let’s start with LASSO regression.\n\n# 5-fold CV\ndata_cv &lt;- vfold_cv(data, v=5, repeats=5)\n\n# Workflow to tune the parameter\nls_tune_result_cv &lt;- ls_wf %&gt;% \n  tune_grid(resamples=data_cv, grid=ls_grid, metrics=metric_set(yardstick::rmse))\n\n# Make a plot of tuning results\nautoplot(ls_tune_result_cv)\n\n\n\n\n\n\n\n\nAs shown, the RMSE increases as the penalty parameter increases. This is a similar pattern as we observed above.\nThen, let’s repeat the steps for random forest.\n\n# Workflow to tune the parameter\nrf_tune_result_cv &lt;- rf_wf %&gt;% \n  tune_grid(resamples=data_cv, grid=rf_grid, metrics=metric_set(yardstick::rmse))\n\n# Make a plot of tuning results\nautoplot(rf_tune_result_cv)"
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Guozheng Yang's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at C:/Users/86182/Desktop/EPID 8060E/MADA/GuozhengYang-MADA-portfolio\n\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\n\nWarning: package 'skimr' was built under R version 4.2.3\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  character                1     \n  factor                   1     \n  numeric                  3     \n________________________         \nGroup variables            None  \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate min max empty n_unique whitespace\n1 Major                 0             1   4  10     0        5          0\n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate    mean      sd    p0   p25   p50   p75\n1 Height                0             1   166.     16.0   133   156   166   178\n2 Weight                0             1    70.1    21.2    45    55    70    80\n3 Salary                0             1 75588.  20804.  49877 65012 66685 90400\n    p100 hist \n1    183 ▂▁▃▃▇\n2    110 ▇▂▃▂▂\n3 109841 ▅▇▂▅▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\np5 &lt;- mydata %&gt;% ggplot(aes(x=Major, y=Height, color = Major)) + geom_boxplot()\nplot(p5)\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"major-height-boxplot.png\")\nggsave(filename = figure_file, plot=p5) \n\nSaving 7 x 5 in image\n\n\n\np6 &lt;- mydata %&gt;% ggplot(aes(x=Weight, y=Salary)) + geom_point()\nplot(p6)\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-salary-scatter.png\")\nggsave(filename = figure_file, plot=p6) \n\nSaving 7 x 5 in image\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.2.3\n\nlibrary(here) #to set paths\n\nhere() starts at C:/Users/86182/Desktop/EPID 8060E/MADA/GuozhengYang-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 3\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n\nhead(rawdata)\n\n# A tibble: 6 × 3\n  Height Weight Gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 180        80 M     \n2 175        70 O     \n3 sixty      60 F     \n4 178        76 F     \n5 192        90 NA    \n6 6          55 F     \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Guozheng Yang's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Guozheng Yang's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Guozheng Yang's Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Guozheng Yang's Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Guozheng Yang's Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  }
]